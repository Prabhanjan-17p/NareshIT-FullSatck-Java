Spring Core Task01: Payment Processing System Using @Qualifier with AppConfig
-----------------------
üéØ Objective:
Develop a Spring Core console application where multiple payment methods (e.g., UPI and Card) are implemented. Use @Qualifier to resolve ambiguity when injecting the appropriate payment service.

üìÅ Suggested Packages to Create:
com.nit.service ‚Äî Interface and its implementations (UPI, Card)

com.nit.config ‚Äî Java-based configuration class

com.nit.client ‚Äî Main class to run the application

üõ†Ô∏è Task Steps:
1Ô∏è‚É£ Define an Interface
Create a PaymentService interface with a method to process payments.

2Ô∏è‚É£ Create Two Implementations
One class for UPIPaymentService

One class for CardPaymentService

Annotate each implementation with @Component and give them unique names using @Component("name").

3Ô∏è‚É£ Create a Processor Class
Define a PaymentProcessor class that depends on PaymentService.

Use @Autowired with @Qualifier("beanName") in the constructor or setter to inject the desired payment implementation.

4Ô∏è‚É£ Configure Java-Based AppConfig
Create a configuration class using @Configuration.

Use @ComponentScan("basePackage") to auto-detect beans.

5Ô∏è‚É£ Write the Main Application Runner
Load the context using AnnotationConfigApplicationContext.

Get the PaymentProcessor bean.

Call the method to process payment with some test amount.

6Ô∏è‚É£ Test the Application
Run the application with cardService injected.

Change the @Qualifier value to upiService and rerun.

Observe how different implementations get executed based on the qualifier.

ANS ---
package com.nit.sbean;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
public class PaymentProcessor {
	private PaymentService pas;

//	@Autowired
//	public PaymentProcessor(@Qualifier("card") PaymentService pas) {
//		super();
//		this.pas = pas;
//	}

	@Autowired
	@Qualifier("upi")
	public void setPas(PaymentService pas) {
		this.pas = pas;
	}
	
	public void testAmount(int amt) {
		pas.processPayments(amt);
	}
	
	
}


package com.nit.sbean;

import org.springframework.stereotype.Component;

@Component("card")
public class CardPaymentService  implements PaymentService{

	@Override
	public void processPayments(int amt) {
		System.out.println("-- Card Payment :: "+amt+" --");
	}

}


package com.nit.sbean;

import org.springframework.stereotype.Component;

@Component("upi")
public class UPIPaymentService implements PaymentService{

	@Override
	public void processPayments(int amt) {
		System.out.println("-- UPI Payment :: "+amt+" --");
	}

}


package com.nit.sbean;

public interface PaymentService {
	public void processPayments(int amt);
}


package com.nit.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com.nit.sbean")
public class AppConfig {

}


package com.nit.main;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.nit.config.AppConfig;
import com.nit.sbean.PaymentProcessor;

public class Main {

	public static void main(String[] args) {
		try (AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);) {
			PaymentProcessor pp = ctx.getBean(PaymentProcessor.class);
			pp.testAmount(5000);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}


--------------------------------------------------------------------------------------------------------------


Spring Core Task02: Vehicle Maintenance System Using @Qualifier
---------------------
üéØ Objective:
Create a Spring Core application where vehicle maintenance is handled differently for two types of vehicles (Car and Bike). Use @Qualifier to inject the appropriate maintenance logic.

üìÅ Suggested Packages:
com.nit.service ‚Äî Interface and its implementations (Car, Bike)

com.nit.config ‚Äî Java-based config class

üõ†Ô∏è Task Steps:
1Ô∏è‚É£ Create MaintenanceService Interface
Method: performService()

2Ô∏è‚É£ Implement for Two Vehicle Types

CarMaintenanceService

BikeMaintenanceService
Use @Component("carService") and @Component("bikeService")

3Ô∏è‚É£ Create VehicleWorkshop Class
Inject MaintenanceService using @Autowired and @Qualifier

4Ô∏è‚É£ Java Configuration with @ComponentScan
AppConfig class to scan the base package

5Ô∏è‚É£ Main Class to Simulate Maintenance
Load context, get the VehicleWorkshop, and call maintenance method

6Ô∏è‚É£ Test
Change the qualifier to switch between car and bike service

üí° All These Tasks Teach:
How to resolve multiple bean ambiguity with @Qualifier

Java-based Spring configuration (AppConfig)

Real-world service abstraction

ANS------
package com.nit.main;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.nit.config.AppConfig;
import com.nit.sbean.VehicleWorkshop;

public class Main2 {

	public static void main(String[] args) {
		try (AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);) {
			VehicleWorkshop v =  ctx.getBean(VehicleWorkshop.class);
			v.callService();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}



package com.nit.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com.nit.sbean")
public class AppConfig {

}


package com.nit.sbean;

public interface MaintenanceService {
	public void performService();
}


package com.nit.sbean;

import org.springframework.stereotype.Component;

@Component("carService")
public class CarMaintenanceService implements MaintenanceService{

	@Override
	public void performService() {
		System.out.println("Car");
	}

}


package com.nit.sbean;

import org.springframework.stereotype.Component;

@Component("bikeService")
public class BikeMaintenanceService implements MaintenanceService{

	@Override
	public void performService() {
		System.out.println("Bike");
	}

}


package com.nit.sbean;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
public class VehicleWorkshop {
	private MaintenanceService mainS;

	@Autowired
	public VehicleWorkshop(@Qualifier("carService") MaintenanceService mainS) {
		super();
		this.mainS = mainS;
	}
	
	public void callService() {
		mainS.performService();
	}
}
====================================================================================================================