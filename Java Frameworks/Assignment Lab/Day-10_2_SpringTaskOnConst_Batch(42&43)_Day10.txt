Question 1:
-------------------------
You need to build a system where different types of loans (like Home Loan, Car Loan) have different interest rates.
The logic to calculate interest should be injected into a LoanProcessor class using constructor injection.

ðŸ”§ Requirements:
âœ… 1. Interface
Name: InterestCalculator

Method:
double calculateInterest(double principal);

âœ… 2. Implementations
Class: HomeLoanCalculator

double rateOfInterest = 8.5;

Implements InterestCalculator

Class: CarLoanCalculator
---------------------------------------

double rateOfInterest = 10.5;

Implements InterestCalculator

Each implementation must override the method calculateInterest(double principal) and compute:

interest = (principal * rateOfInterest) / 100
âœ… 3. Dependent Class
Class: LoanProcessor

Dependency: InterestCalculator

Inject this using a constructor.

Method:
void processLoan(double principal)
This method should:

Call calculateInterest(principal) on the injected object

Print:

Principal amount

Calculated interest

Total payable amount

âœ… 4. Java Configuration
Class: AppConfig with @Configuration

Define @Bean methods for:

HomeLoanCalculator

CarLoanCalculator

LoanProcessor â†’ inject either loan calculator (choose one for now)

ANS ----
package com.nit.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com.nit.sbean")
public class AppConfig {
	
}


package com.nit.main;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.nit.config.AppConfig;
import com.nit.sbean.LoanProcessor;

public class Main {
	public static void main(String[] args) {
		try(AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);) {
			LoanProcessor loanProcessor = ctx.getBean(LoanProcessor.class);
			loanProcessor.processLoan(12000);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


package com.nit.sbean;

public interface InterestCalculator {
	double calculateInterest(double principal);
}


package com.nit.sbean;

import org.springframework.stereotype.Component;

@Component("homeloan")
public class HomeLoanCalculator implements InterestCalculator{

	@Override
	public double calculateInterest(double principal) {
		double rateOfInterest = 8.5;
		return (principal * rateOfInterest) / 100;
	}

}


package com.nit.sbean;

import org.springframework.stereotype.Component;

@Component("carloan")
public class CarLoanCalculator implements InterestCalculator{

	@Override
	public double calculateInterest(double principal) {
		double rateOfInterest = 10.5;
		return (principal * rateOfInterest) / 100;
	}

}


package com.nit.sbean;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
public class LoanProcessor {
	//HAS-A
	private InterestCalculator interestCalculator;

	//Constructor
	@Autowired
	public LoanProcessor(@Qualifier("homeloan") InterestCalculator interestCalculator) {
		super();
		this.interestCalculator = interestCalculator;
	}
	
	public void processLoan(double principal) {
		double calculateInterest = interestCalculator.calculateInterest(principal);
		System.out.println("Principle Amount :: "+principal);
		System.out.println("Total Payable Amount :: "+calculateInterest);
	}
}

---------------------------------------------------------------------------------------------------------------------------------
Question-2
--------------------
Scenario:
The system should calculate the bill for food items ordered by the user. The bill varies based on whether the item is Veg or Non-Veg. The calculation logic should be injected into a FoodOrderApp class using constructor injection.

ðŸ”§ Requirements:
âœ… 1. Interface
Name: BillingService

Method:
double getBill(String item);
Accepts food item name, returns total bill amount (price).

âœ… 2. Implementations
Class: VegBillingService

Predefined veg item prices: e.g., "Idli" â†’ â‚¹30, "Dosa" â†’ â‚¹50

Implements BillingService

Method should return the item's price or 0 if not found

Class: NonVegBillingService

Predefined non-veg prices: e.g., "Chicken Biryani" â†’ â‚¹150, "Mutton Curry" â†’ â‚¹200

Implements BillingService

Method should return the item's price or 0 if not found

âœ… 3. Dependent Class
Class: FoodOrderApp

Dependency: BillingService

Injected via constructor

Method:
void orderFood(String item)
This method should:

Call getBill(item)

Print:

Item Name

Price (Bill Amount)

Message like "Thank you for your order!"

âœ… 4. Java Configuration
Class: AppConfig with @Configuration

Define @Bean methods for:

VegBillingService

NonVegBillingService

FoodOrderApp â†’ Inject one of the above services via constructor

âœ… 5. main() Method
Load the Spring context using AnnotationConfigApplicationContext

Get the FoodOrderApp bean

Call orderFood("Dosa") or "Chicken Biryani"

ANS --
package com.nit.main;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.nit.config.AppConfig2;
import com.nit.sbean2.FoodOrderApp;

public class Main2 {
	public static void main(String[] args) {
		try(AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig2.class);) {
			FoodOrderApp foodOrderApp = ctx.getBean(FoodOrderApp.class);
			foodOrderApp.orderFood("idli");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


package com.nit.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com.nit.sbean2")
public class AppConfig2 {
	
}


package com.nit.sbean2;

public interface BillingService {
	double getBill(String item);
}


package com.nit.sbean2;

import org.springframework.stereotype.Component;

@Component("veg")
public class VegBillingService implements BillingService{

	@Override
	public double getBill(String item) {
		double price;
		if (item.equalsIgnoreCase("Idli")) {
			price = 30;
		}else if (item.equalsIgnoreCase("Dosa")) {
			price = 50;
		}else {
			price = 0;
		}
		return price;
	}

}


package com.nit.sbean2;

import org.springframework.stereotype.Component;

@Component("nonveg")
public class NonVegBillingService implements BillingService{

	@Override
	public double getBill(String item) {
		double price;
		if (item.equalsIgnoreCase("Chicken Biryani")) {
			price = 150;
		}else if (item.equalsIgnoreCase("Mutton Curry")) {
			price = 200;
		}else {
			price = 0;
		}
		return price;
	}

}


package com.nit.sbean2;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
public class FoodOrderApp {
	private BillingService billingService;

	@Autowired
	public FoodOrderApp(@Qualifier("nonveg") BillingService billingService) {
		super();
		this.billingService = billingService;
	}
	
	public void orderFood(String item) {
		double bill = billingService.getBill(item);
		System.out.println("Item Name :: "+item
				+ "\nPrice (Bill Amount) :: "+bill
				+ "\nMessage like \"Thank you for your order!\"");
	}
	
}

============================================================================================================================================