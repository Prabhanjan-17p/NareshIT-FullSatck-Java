Task: Payment Processing System
ðŸŽ¯ Objective:
Create a Spring Boot console-based application that allows users to choose a payment method at runtime. Use the Strategy Design Pattern to process payments via Credit Card, PayPal, or UPI.

ðŸ“˜ Use Case:
A user shops on an application and chooses how to pay. Depending on the selected payment method, the application should apply the appropriate payment strategy.

ðŸ”§ Key Components:
Strategy Interface:

PaymentStrategy

Declares a method like pay(double amount).

Concrete Strategies:

CreditCardPayment

PayPalPayment

UPIPayment

Each implements PaymentStrategy and contains specific logic for that payment method.

Context Class:

PaymentService

Has a reference to PaymentStrategy.

Calls the pay() method on the selected strategy.

Main Application(Main Class):

Prompts the user to enter an amount and choose a payment method.

Based on input, injects the right strategy and delegates payment to PaymentService.

ðŸ›  Technologies Used:
Java 8+

Spring Boot (3.x preferred)

Spring Core Annotations (@Component, @Autowired, @Qualifier)

Console input using Scanner

ðŸ§ª Example Flow:
Console prompts:

"Enter amount to pay:"

"Choose payment method: 1. Credit Card 2. PayPal 3. UPI"

User enters 2000 and selects 2

Output:
"Paid â‚¹2000 using PayPal"

ANS ----
package com.nt;

import java.util.Scanner;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

import com.nt.Service.PaymentService;
import com.nt.Strategy.PaymentStrategy;

@SpringBootApplication
public class Day03Application {

	public static void main(String[] args) {
		try (ConfigurableApplicationContext ctx = SpringApplication.run(Day03Application.class, args);
				Scanner sc = new Scanner(System.in)) {

			System.out.print("Enter amount to pay: ");
			double amt = sc.nextDouble();

			System.out.print("Choose payment method: 1. Credit Card 2. PayPal 3. UPI: ");
			int ch = sc.nextInt();

			PaymentStrategy strategy = switch (ch) {
			case 1 -> ctx.getBean("credit", PaymentStrategy.class);
			case 2 -> ctx.getBean("paypal", PaymentStrategy.class);
			case 3 -> ctx.getBean("upi", PaymentStrategy.class);
			default -> null;
			};

			if (strategy == null) {
				System.out.println("Invalid payment method selected.");
			} else {
				PaymentService paymentService = ctx.getBean(PaymentService.class);
				paymentService.setPaymentStrategy(strategy);
				paymentService.makePayment(amt);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


package com.nt.Strategy;

public interface PaymentStrategy {
	public void pay(double amount);
}


package com.nt.Strategy;

import org.springframework.stereotype.Component;

@Component("credit")
public class CreditCardPayment implements PaymentStrategy {

	@Override
	public void pay(double amount) {
        System.out.println("Paid â‚¹" + amount + " using Credit Card");
	}

}


package com.nt.Strategy;

import org.springframework.stereotype.Component;

@Component("paypal")
public class PayPalPayment implements PaymentStrategy {

	@Override
	public void pay(double amount) {
        System.out.println("Paid â‚¹" + amount + " using PayPal");
	}

}


package com.nt.Strategy;

import org.springframework.stereotype.Component;

@Component("upi")
public class UPIPayment implements PaymentStrategy {

	@Override
	public void pay(double amount) {
        System.out.println("Paid â‚¹" + amount + " using UPI");
	}

}


package com.nt.Service;


import org.springframework.stereotype.Service;

import com.nt.Strategy.PaymentStrategy;

@Service
public class PaymentService {
	
	private PaymentStrategy paymentStrategy;

	public void setPaymentStrategy(PaymentStrategy paymentStrategy) {
		this.paymentStrategy = paymentStrategy;
	}

	public void makePayment(double amount) {
		if (paymentStrategy == null) {
			System.out.println("Payment method not set!");
		} else {
			paymentStrategy.pay(amount);
		}
	}
}
===========================================================================================================================================