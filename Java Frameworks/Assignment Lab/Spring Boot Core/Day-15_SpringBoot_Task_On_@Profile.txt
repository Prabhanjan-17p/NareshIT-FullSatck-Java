Q1: Injecting Multiple Payment Services using Profiles
üéØ Problem Restated

You need a payment system with Credit Card, PayPal, and UPI services. Instead of using @Qualifier to select a bean,
you should use Spring Profiles so that only the payment service for the active profile gets loaded.

üîπ Step 1: Define a Common Interface

Create a PaymentService interface with a method processPayment().

This will be implemented by different payment classes.

üîπ Step 2: Create Implementations with Profiles

Create three classes:

CreditCardPaymentService (profile: creditcard)

PayPalPaymentService (profile: paypal)

UPIPaymentService (profile: upi)

Annotate each class with @Profile("...") so Spring only loads the bean for the active profile.

üîπ Step 3: Create a PaymentProcessor Class

Define a PaymentProcessor component that depends on PaymentService.

Since only one bean will be active per profile, Spring automatically injects the correct implementation.

This avoids the need for @Qualifier.

üîπ Step 4: Configure Spring with Java Config

Create an AppConfig class using @Configuration and @ComponentScan so Spring can find all components.

No XML configuration is required.

üîπ Step 5: Activate a Profile

You can activate a profile in multiple ways:

In application.properties:

Set spring.profiles.active=paypal (or creditcard / upi).

Using command line while running:

mvn spring-boot:run -Dspring-boot.run.profiles=upi

Using environment variable:

SPRING_PROFILES_ACTIVE=creditcard

üîπ Step 6: Run and Verify

Run the application with different active profiles.

Only one payment service bean will be loaded at a time.

Example outputs:

If profile is creditcard ‚Üí processes payment via Credit Card.

If profile is paypal ‚Üí processes payment via PayPal.

If profile is upi ‚Üí processes payment via UPI.
ANS ----
package com.nt;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import com.nt.service.PaymentProcessor;

@SpringBootApplication
public class Day15Application {

	public static void main(String[] args) {
		ApplicationContext context = SpringApplication.run(Day15Application.class, args);

        PaymentProcessor processor = context.getBean(PaymentProcessor.class);
        processor.makePayment(1000.00);
	}

}


package com.nt.service;

import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

@Service
@Profile("credit")
public class CreditCardPaymentService implements PaymentService {

	@Override
	public void processPayment(double amount) {
		System.out.println("Processing payment of $" + amount + " via Credit Card.");
	}

}


package com.nt.service;

import org.springframework.stereotype.Component;

@Component
public class PaymentProcessor {
	private final PaymentService paymentService;

	public PaymentProcessor(PaymentService paymentService) {
		super();
		this.paymentService = paymentService;
	}

	public void makePayment(double amount) {
		paymentService.processPayment(amount);
	}
}


package com.nt.service;

public interface PaymentService {
	public void processPayment(double amount);
}


package com.nt.service;

import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

@Service
@Profile("paypal")
public class PayPalPaymentService implements PaymentService {

	@Override
	public void processPayment(double amount) {
		System.out.println("Processing payment of $" + amount + " via PayPal.");
	}
}


package com.nt.service;

import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

@Service
@Profile("UPI")
public class UPIPaymentService implements PaymentService {

	@Override
	public void processPayment(double amount) {
		System.out.println("Processing payment of $" + amount + " via UPI.");
	}

}

================================================================================================
Q2: Vehicle Service Selection using Profiles
üéØ Problem Restated

You are building a vehicle maintenance system where Car, Bike, and Truck have different maintenance processes.
Instead of selecting the correct service with @Qualifier, you want to use Spring Profiles so that only the service for the active profile is loaded.

üîπ Step 1: Define the Common Interface

Create a VehicleService interface with a method performService().

Each vehicle type will implement this interface differently.

üîπ Step 2: Create Profile-Specific Implementations

Create three classes that implement VehicleService:

CarService ‚Üí annotated with @Profile("car").

BikeService ‚Üí annotated with @Profile("bike").

TruckService ‚Üí annotated with @Profile("truck").

üëâ Only one implementation is active at a time, depending on the profile.

üîπ Step 3: Create ServiceCenter

Define a ServiceCenter component that depends on VehicleService.

Since only one bean is active per profile, Spring will automatically inject the right service.

This eliminates the need for @Qualifier.

üîπ Step 4: Configure with Java Config

Create an AppConfig class using @Configuration and @ComponentScan.

This allows Spring to discover and register all services automatically.

üîπ Step 5: Activate a Profile

Choose which vehicle service to use by setting the profile:

application.properties

spring.profiles.active=car (or bike, or truck).

Command-line argument

mvn spring-boot:run -Dspring-boot.run.profiles=bike.

Environment variable

SPRING_PROFILES_ACTIVE=truck.

üîπ Step 6: Run and Verify

Start the application with a given profile.

Call performService() through the ServiceCenter.

Expected results:

If profile is car ‚Üí Car service process runs.

If profile is bike ‚Üí Bike service process runs.

If profile is truck ‚Üí Truck service process runs.

ANS ------
package com.nt;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

import com.nt.service.ServiceCenter;

@SpringBootApplication
public class Day1502Application {

	public static void main(String[] args) {
		ConfigurableApplicationContext run = SpringApplication.run(Day1502Application.class, args);
		
		ServiceCenter bean = run.getBean(ServiceCenter.class);
		
		bean.performService();
	}

}


package com.nt.service;

import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

@Service
@Profile("bike")
public class BikeService implements VehicleService {

	@Override
	public void performService() {
		System.out.println("üèçÔ∏è Bike service process runs");
	}

}


package com.nt.service;

import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

@Service
@Profile("car")
public class CarService implements VehicleService {

	@Override
	public void performService() {
		System.out.println("üöó Car service process runs");
	}

}


package com.nt.service;

import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

@Service
@Profile("truck")
public class TruckService implements VehicleService {

	@Override
	public void performService() {
		System.out.println("üöõ Truck service process runs");
	}

}


package com.nt.service;

import org.springframework.stereotype.Component;

@Component
public class ServiceCenter {
	
	private final VehicleService vehicleService;

	public ServiceCenter(VehicleService vehicleService) {
		super();
		this.vehicleService = vehicleService;
	}
	
	public void performService() {
		vehicleService.performService();
	}
}


package com.nt.service;

public interface VehicleService {

	public void performService();
}


spring.application.name=Day-15-02

spring.profiles.active=bike
spring.profiles.active=truck
spring.profiles.active=car
================================================================================================