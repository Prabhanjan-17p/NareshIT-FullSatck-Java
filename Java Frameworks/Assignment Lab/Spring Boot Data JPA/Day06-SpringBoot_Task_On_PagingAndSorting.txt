Task. Spring Boot Data JPA Task: Employee Paging and Sorting
üéØ Objective

Build a Spring Boot application using Spring Data JPA that:

Stores Employee records in a database.

Provides functionality to fetch records with pagination and sorting.

Prints paginated results in the console.

üõ† Task Requirements
1Ô∏è.Main Application Class

Use @SpringBootApplication.

Implement CommandLineRunner to test paging and sorting functionality.

2Ô∏è.Employee Entity

Table: employees

Fields:

id (Long, Primary Key)

name (String)

designation (String)

salary (Double)

3Ô∏è.EmployeeRepository

Extend PagingAndSortingRepository<Employee, Long>.

Supports built-in methods:

findAll(Pageable pageable) ‚Üí for pagination.

findAll(Sort sort) ‚Üí for sorting.

4Ô∏è.Paging Examples

Fetch employees in pages of size 3.

Print each page separately.

5Ô∏è.Sorting Examples

Fetch all employees sorted by:

Name (Ascending).

Salary (Descending).

ANS ----
package com.nt;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Day06Application {

	public static void main(String[] args) {
		SpringApplication.run(Day06Application.class, args);
	}

}


package com.nt.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@Entity
@Table(name = "Data_JPA_Day06_Employee")
@Data
@NoArgsConstructor
@AllArgsConstructor
@RequiredArgsConstructor
public class Employee {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	@Column(name = "Name")
	@NonNull
	private String name;
	@Column(name = "Designation")
	@NonNull
	private String designation;
	@Column(name = "Salary")
	@NonNull
	private Double salary;
}


package com.nt.repository;

import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.PagingAndSortingRepository;

import com.nt.entity.Employee;

public interface EmployeeRepository extends PagingAndSortingRepository<Employee, Long>,CrudRepository<Employee, Long> {

}


package com.nt.runner;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.nt.entity.Employee;
import com.nt.service.IEmployeeService;

@Component
public class DemoApplication implements CommandLineRunner {
	@Autowired
	private IEmployeeService repo;

	@Override
	public void run(String... args) throws Exception {
//		List<Employee> employees = Arrays.asList(new Employee("Alice", "Developer", 50000.0),
//				new Employee("Bob", "Manager", 70000.0), new Employee("Charlie", "Tester", 40000.0),
//				new Employee("David", "Developer", 55000.0), new Employee("Eve", "Manager", 80000.0),
//				new Employee("Frank", "Tester", 42000.0), new Employee("Grace", "Developer", 60000.0));
//		repo.saveAllData(employees);
		
		
//		repo.showInPage(0, 3).forEach(System.out::println);
		
		repo.showDataInSort(true, "name").forEach(System.out::println);;
	}

}


package com.nt.service;

import java.util.List;

import org.springframework.data.domain.Page;

import com.nt.entity.Employee;

public interface IEmployeeService {
	public void saveAllData(List<Employee> list);
	
	public Page<Employee> showInPage(int pageNo, int pageZise);
	
	public Iterable<Employee> showDataInSort(boolean ascOrder, String ...pros);
}


package com.nt.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.nt.entity.Employee;
import com.nt.repository.EmployeeRepository;

@Service
public class EmployeeServiceIMPL implements IEmployeeService {
	@Autowired
	private EmployeeRepository repo;
	
	@Override
	public void saveAllData(List<Employee> list) {
		repo.saveAll(list);
		System.out.println("--------------------save all--------------------");
	}

	@Override
	public Page<Employee> showInPage(int pageNo, int pageZise) {
		Pageable pageable = PageRequest.of(pageNo, pageZise);
		Page<Employee> page = repo.findAll(pageable);
		return page;
	}

	@Override
	public Iterable<Employee> showDataInSort(boolean ascOrder, String... pros) {
		Sort sort = Sort.by(ascOrder? Sort.Direction.ASC:Sort.Direction.DESC,pros);
		Iterable<Employee> all = repo.findAll(sort);
		return all;
	}

}


spring.application.name=Day_06


# Oracle DB Connection
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl
spring.datasource.username=MYDB
spring.datasource.password=MYDB

# JPA Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.OracleDialect
=======================================================================================