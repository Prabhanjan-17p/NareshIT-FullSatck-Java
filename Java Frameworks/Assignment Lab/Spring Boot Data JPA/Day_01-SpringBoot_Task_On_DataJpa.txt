Task: Employee Management (Basic JPA Repository)
1. Objective

Build a simple Spring Boot JPA application that demonstrates the use of:

save() → Insert new records into the database.

findById() → Retrieve a specific record using its primary key.

findAll() → Retrieve all records from the table.

2. Prerequisites

Spring Boot project (Maven/Gradle).

Dependencies:

spring-boot-starter-data-jpa

spring-boot-starter

h2 (or MySQL/other DB).

3. Data Model

Create an entity class, e.g., Employee, with fields like:

id (Primary Key)

name

department

salary

4. Repository Responsibilities

Create a JPA repository interface extending JpaRepository<Employee, Long> which will provide:

save(Employee e) → Store a new employee or update an existing one.

findById(Long id) → Fetch an employee by their ID.

findAll() → Fetch all employees from the table.

5. Task Steps

Save records

Insert a few employees (e.g., John, Alice, Bob) using save().

Verify data is stored in DB.

Find by ID

Retrieve an employee by a specific ID.

Print details to confirm the record exists.

Find all

Retrieve all employees.

Display them in console/logs.

6. CommandLineRunner Demo Actions

When the application starts:

Insert multiple employees.

Fetch one employee by ID.

Fetch and list all employees.

7. Expected Output (Conceptual)

After save() → DB has inserted records.

After findById(1) → Output details of employee with ID 1.

After findAll() → Output all employees (list of names/departments/salaries).

ANS ----

package com.nt;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Day01Application {

	public static void main(String[] args) {
		SpringApplication.run(Day01Application.class, args);
	}

}


package com.nt.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;


@Data
@Entity
@NoArgsConstructor
@AllArgsConstructor
@RequiredArgsConstructor
@Table(name = "Spring_JPA_Assng")
public class Employee {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	@Column(name = "Name")
	@NonNull
	private String name;
	@Column(name = "Department")
	@NonNull
	private String department;
	@Column(name = "Salary")
	@NonNull
	private Double salary;
}


package com.nt.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.nt.entity.Employee;

public interface IEmployeeRepository extends JpaRepository<Employee, Integer> {

}


package com.nt.runners;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.nt.entity.Employee;
import com.nt.service.EmployeeIMPLService;


@Component
public class TestRunner implements CommandLineRunner {
	@Autowired
	private EmployeeIMPLService implService;

	@Override
	public void run(String... args) throws Exception {
//		Employee e1 = new Employee("Kanha", "Developer", 900000.0);
//		implService.saveEMP(e1);

//		List<Employee> employees = Arrays.asList(new Employee("Kanha", "Developer", 900000.0),
//				new Employee("Prabhanjan", "Software Engineer", 850000.0),
//				new Employee("Anita", "Team Lead", 1200000.0), new Employee("Rohit", "Tester", 600000.0),
//				new Employee("Sneha", "HR Manager", 750000.0), new Employee("Vikram", "Full Stack Developer", 950000.0),
//				new Employee("Pooja", "UI/UX Designer", 700000.0), new Employee("Amit", "Project Manager", 1400000.0),
//				new Employee("Neha", "Business Analyst", 800000.0),
//				new Employee("Suresh", "DevOps Engineer", 1000000.0));
//		String allEmp = implService.saveAllEmp(employees);
//		System.out.println(allEmp);
		
//		List<Employee> allEmp = implService.findAllEmp();
//		allEmp.stream().forEach(System.out::println);
		
		Employee byEMPId = implService.findByEMPId(5);
		System.out.println(byEMPId);
	}

}



package com.nt.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nt.entity.Employee;
import com.nt.repository.IEmployeeRepository;


@Service
public class EmployeeIMPLService implements IEmployeeService {
	@Autowired
	private IEmployeeRepository repo;

	@Override
	public String saveEMP(Employee emp) {
		Employee emp1 = repo.save(emp);
		return "Data Saved id :: "+emp1.getId();
	}

	@Override
	public Employee findByEMPId(Integer id) {
		Optional<Employee> byId = repo.findById(id);
		return byId.orElse(null);
	}

	@Override
	public List<Employee> findAllEmp() {
		List<Employee> list = repo.findAll();
		return list;
	}

	@Override
	public String saveAllEmp(List<Employee> list) {
		List<Employee> saveAll = repo.saveAll(list);
		return "All Data Saved id :: "+saveAll;
	}

}



package com.nt.service;

import java.util.List;

import com.nt.entity.Employee;

public interface IEmployeeService {
	public String saveAllEmp(List<Employee> list);
	public String saveEMP(Employee emp);
	public Employee findByEMPId(Integer id);
	public List<Employee> findAllEmp();
}



spring.application.name=Day_01

# Oracle DB Connection
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl
spring.datasource.username=MYDB
spring.datasource.password=MYDB

# JPA Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.OracleDialect