Task 1: Payment Gateway Integration using Constructor Injection (XML Configuration)
ðŸ§© Objective:
Design a Spring Core application to simulate a payment system where the required payment service (e.g., PayPal or Stripe) is injected via constructor using Spring XML configuration.

âœ… Task Steps:
Step 1: Define Interface
Create a PaymentService interface with a method to process payment.
This will serve as the abstraction for multiple payment options.

Step 2: Implement Services
Create two classes:

PayPalService: Implements PaymentService to simulate PayPal payments.

StripeService: Implements PaymentService to simulate Stripe payments.

Step 3: Define Main Component
Create a class PaymentProcessor that depends on PaymentService.
Use a constructor to inject this dependency.

Step 4: Configure Beans in XML
Create an applicationContext.xml file to declare Spring beans:

Define a bean for PayPalService or StripeService.

Define a bean for PaymentProcessor and inject the service via <constructor-arg>.

Step 5: Load and Run
In your main class:

Load the Spring container using ClassPathXmlApplicationContext.

Retrieve the PaymentProcessor bean.

Call a method to process a sample payment.

ANS
package com.nit.sbean;

public interface PaymentService {
	public void process();
}

package com.nit.sbean;

public class PayPalService implements PaymentService {

	@Override
	public void process() {
		System.out.println("PayPalService.process()");
	}
}


package com.nit.sbean;

public class StripeService  implements PaymentService {

	@Override
	public void process() {
		System.out.println("StripeService.process()");
	}
}


package com.nit.sbean;

public class PaymentProcessor {
	private PaymentService payment;

	public PaymentProcessor(PaymentService payment) {
		super();
		this.payment = payment;
		System.out.println("PaymentProcessor. 1 :: parameter Consrtuctor");
	}
	
	public void makePay() {
		payment.process();
	}
}


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
	
    <bean id="paymentService" class="com.nit.sbean.PayPalService"/>

    <bean id="payProcessor" class="com.nit.sbean.PaymentProcessor">
        <constructor-arg name="payment" ref="paymentService"/>
    </bean>

</beans>

package com.nit.main;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.nit.sbean.PaymentProcessor;

public class Main {

	public static void main(String[] args) {	
		   ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("com/nit/cfgs/applicationContext.xml");

	        PaymentProcessor processor = (PaymentProcessor)ctx.getBean("payProcessor");
	        
	        processor.makePay();

	        ctx.close();
	}

}


Question2:
==========
Wish Message Generator Using Constructor Injection in Spring
You are tasked with developing a Spring Core application that generates a wish message based on the current time of day using constructor-based dependency injection. The application should use LocalDateTime to determine whether to send a "Good Morning", "Good Afternoon", or "Good Evening" message.

Requirements:
WishMessageGenerator Class:

Create a WishMessageGenerator class with the following attributes:
LocalDateTime currentDateTime: This will store the current date and time.
Implement a constructor WishMessageGenerator(LocalDateTime currentDateTime) to allow for dependency injection using Spring.
Implement a generateWishMessage() method that returns:
"Good Morning" if the time is before 12 PM.
"Good Afternoon" if the time is between 12 PM and 6 PM.
"Good Evening" if the time is after 6 PM.
Note:
Use an XML file to configure the Spring bean.
Main Class:
Create a main class that loads the Spring application context, retrieves the WishMessageGenerator bean, and prints the wish message based on the current time.
Expected Output:

If the current time is before 12 PM:
Good Morning  
If the current time is between 12 PM and 6 PM:
Good Afternoon  
If the current time is after 6 PM:
Good Evening 

ANS 
package com.nit.sbean;

import java.time.LocalDateTime;

public class WishMessageGenerator {
	private LocalDateTime currentDateTime;

	public WishMessageGenerator(LocalDateTime currentDateTime) {
		super();
		this.currentDateTime = currentDateTime;
		System.out.println("WishMessageGenerator 1::Parameter Constructor.");
	}
	
	public String generateWishMessage(){
		int hour = currentDateTime.getHour();
		if(hour < 12) return "Good Morning";
		else if(hour > 12 && hour <= 18 ) return "Good Afternoon";
		else return "Good Evening";
	}
	
}


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
	
    <bean id="time" class="java.time.LocalDateTime" factory-method="now"/>

    <bean id="timeWish" class="com.nit.sbean.WishMessageGenerator">
        <constructor-arg name="currentDateTime" ref="time"/>
    </bean>

</beans>


package com.nit.main;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.nit.sbean.WishMessageGenerator;

public class Main2 {

	public static void main(String[] args) {
		try (ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("com/nit/cfgs/wishMSGContext.xml");){

			WishMessageGenerator wish = (WishMessageGenerator)ctx.getBean("timeWish");
			
			String msg = wish.generateWishMessage();
			
			System.out.println(msg);	
		} catch (Exception e) {
			e.printStackTrace();
		}


	}

}


Question 3: 
============
Notification Sender (XML-Based Constructor Injection)
ðŸ§© Objective:
Build a system that sends notifications using Email or SMS services, injected via constructor through XML configuration.

âœ… Task Steps:
Create a NotificationService interface for sending messages.

Implement EmailNotification and SmsNotification.

Create a NotificationSender class with a constructor that requires NotificationService.

In applicationContext.xml:

Define beans for both implementations.

Inject the desired one into NotificationSender.

Load the context and trigger a test notification.

------------------------------------
CRT Class
---------

https://www.youtube.com/watch?v=Vw2LcrF_Yx0

https://www.youtube.com/watch?v=S3WTZ4Q-5O0&feature=youtu.be

https://www.youtube.com/watch?v=VjNPsdS8olU&feature=youtu.be

https://www.youtube.com/watch?v=1otQNfCsw_E

https://www.youtube.com/watch?v=6j_-70xnj2A&feature=youtu.be