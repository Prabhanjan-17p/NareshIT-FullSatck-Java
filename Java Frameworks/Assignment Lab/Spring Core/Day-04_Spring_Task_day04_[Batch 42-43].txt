 Java + Spring Framework Coding Exercise: Cake Order System
________________________________________________________________
Problem Statement
-------------------------
You are required to design a Cake ordering system using Java and Spring Framework (Core). 
The system should allow customers to place cake orders with various 
customization options like flavour, quantity, shape, and a message on the cake.

Requirements
--------------------------
Abstract Class Cake
_________________________________
> Create an abstract class Cake with the following:

Properties:
--------------------------
> cake_Flavour (String)
> cake_quantity (float)
> cake_price (static float, default 300)
> shape_of_cake (String)

Constructors:
--------------------------
> No-arg constructor: initializes default values.
> Parameterized constructor: accepts flavour, quantity, and shape.

> Getters and Setters for all fields.

> A method getOrder() that returns a formatted string with cake details
  and total price (cake_price * quantity).

Class OrderCake extending Cake
_________________________________
> Additional property: message_on_cake (String)

Overloaded constructors:
----------------------------
|- One matching Cakeâ€™s constructor.
|- One that includes the message_on_cake parameter.
|- Override getOrder() to include the message if present.

Spring XML Configuration
_________________________________
Configure the following beans in an XML file:

> ordercake (default constructor)
> ordercake1 (constructor with flavour, quantity, shape)
> ordercake2 (constructor with all parameters including message)

Main Class: CakeOrderApplication
__________________________________
Load the Spring context from application-context.xml.

|- Retrieve all three beans and print their getOrder() output.

Expected Output
____________________________________
When the application runs, it should print the details of all 3 orders 
(with or without message) along with the total price based on quantity.

Sample (approximate) output:
------------------------------
Cake [cake_Flavour=vanilla, cake_quantity=1.0, shape_of_cake=square is ready !! kindly pay Rs.300.0]
------------------------------
Cake [cake_Flavour=vanilla, cake_quantity=2.0, shape_of_cake=round is ready !! kindly pay Rs.600.0]
------------------------------
OrderCake [message_on_cake=Happy birthday, order =Cake [cake_Flavour=vanilla, cake_quantity=2.0, shape_of_cake=round is ready!! kindly pay Rs.600.0]]

ANS 

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
        
	
	<bean id="CakeP1" class="com.nit.sbean.OrderCake"> <!-- target spring bean cfg -->
		<constructor-arg name="cake_Flavour" value="vanilla" />
		<constructor-arg name="cake_quantity" value="1.0" />
		<constructor-arg name="shape_of_cake" value="round" />
	</bean>
	
		<bean id="CakeP2" class="com.nit.sbean.OrderCake"> <!-- target spring bean cfg -->
		<constructor-arg name="cake_Flavour" value="vanilla" />
		<constructor-arg name="cake_quantity" value="2.0" />
		<constructor-arg name="shape_of_cake" value="round" />
		<constructor-arg name="message_on_cake" value="Happy birthday" /> 
		
	</bean>
	<bean id="CakeP3" class="com.nit.sbean.OrderCake"/>

</beans>

package com.nit.sbean;

public abstract class Cake {
	String cake_Flavour;
	float cake_quantity;
	static double cake_price = 300;
	String shape_of_cake;
	
	public Cake(){
		cake_Flavour = "vanilla";
		cake_quantity = 1;
		cake_price = 300;
		shape_of_cake = "square";
	}

	public Cake(String cake_Flavour, float cake_quantity, String shape_of_cake) {
		super();
		this.cake_Flavour = cake_Flavour;
		this.cake_quantity = cake_quantity;
		this.shape_of_cake = shape_of_cake;
	}

	public String getCake_Flavour() {
		return cake_Flavour;
	}

	public void setCake_Flavour(String cake_Flavour) {
		this.cake_Flavour = cake_Flavour;
	}

	public float getCake_quantity() {
		return cake_quantity;
	}

	public void setCake_Quantity(float cake_quantity) {
		this.cake_quantity = cake_quantity;
	}

	public static double getCake_price() {
		return cake_price;
	}

	public static void setCake_Price(double cake_price) {
		Cake.cake_price = cake_price;
	}

	public String getShape_of_cake() {
		return shape_of_cake;
	}

	public void setShape_Of_Cake(String shape_of_cake) {
		this.shape_of_cake = shape_of_cake;
	}
	
	public String getOrder() {
		 return "Cake [cake_Flavour="+getCake_Flavour()+", cake_quantity="+getCake_quantity()+", shape_of_cake="+getShape_of_cake() +" is ready !! kindly pay Rs."+(getCake_price()*getCake_quantity())+"]";
	}
	
}


package com.nit.sbean;

public class OrderCake extends Cake {
	String message_on_cake;
	
	public OrderCake() {
		super();
	}

	public OrderCake(String cake_Flavour, float cake_quantity, String shape_of_cake, String message_on_cake) {
		super(cake_Flavour, cake_quantity, shape_of_cake);
		this.message_on_cake = message_on_cake;
	}

	public OrderCake(String cake_Flavour, float cake_quantity, String shape_of_cake) {
		super(cake_Flavour, cake_quantity, shape_of_cake);
	}
	
	@Override
	public String getOrder() {
		if (message_on_cake == null) {
			return super.getOrder();
		}else {
			 return "OrderCake [message_on_cake="+message_on_cake+", order =Cake [cake_Flavour="+getCake_Flavour()+", cake_quantity="+getCake_quantity()+", shape_of_cake="+getShape_of_cake() +" is ready !! kindly pay Rs."+(getCake_price()*getCake_quantity())+"]";
		}
	}
	
}


package com.nit.main;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.nit.sbean.Cake;
import com.nit.sbean.OrderCake;

public class CakeOrderApplication {

	public static void main(String[] args) {
		try (ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("com/nit/cfgs/applicationContext.xml");){

			OrderCake c1 = ctx.getBean("CakeP1",OrderCake.class);
			OrderCake c2 = ctx.getBean("CakeP2",OrderCake.class);
			OrderCake c3 = ctx.getBean("CakeP3",OrderCake.class);
			String order1 = c1.getOrder();
			String order2 = c2.getOrder();
			String order3 = c3.getOrder();
			System.out.println(order1);
			System.out.println("----------------------------");
			System.out.println(order2);
			System.out.println("----------------------------");
			System.out.println(order3);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
