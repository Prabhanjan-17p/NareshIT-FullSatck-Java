-------------------------------------------Inheritance Lab Programs --------------------------------------------------

MCQs  
---- 
Q11) Find the output of the following code  
 
class Grandparent  
{ 
 public void print()  
 { 
     System.out.println("Grandparent"); 
 } 
} 
 
class Parent extends Grandparent  
{ 
 public void print()  
 { 
     System.out.println("Parent"); 
 } 
} 
 
class Child extends Parent  
{ 
 public void Print()  
 { 
     super.super.print();  
     System.out.println("Child"); 
 } 
} 
 
public class Test10  
{ 
 public static void main(String[] args) { 
     Child c = new Child(); 
     c.Print(); 
 } 
} 
 
ANS - Compile Time Error
 
Q12) What is a blank final variable in Java? 
 
A) A non static final variable with user initialized value.  
B) A non static final variable that is not initialized at declaration but must be initialized till constructor body. 
C) A final variable that can be modified inside a method. 
D) A static final variable. 

ANS - B) A non static final variable that is not initialized at declaration but must be initialized till constructor body. 

Q13) What happens if a blank final field is not initialized in all constructors? 
A) The program runs normally 
B) It is initialized with a default value 
C) A compile-time error occurs 
D) It is initialized when accessed for the first time 
 
ANS - C) A compile-time error occurs 
 
Q14) Find the Output of the following code 
 
class A  
{ 
    final int num; 
     
    A() 
    { 
        num = 100; 
    } 
} 
class B extends A  
{ 
    B()  
    { 
        num = 200;   
     System.out.println(num); 
    } 
} 
 
public class Test 
{ 
 public static void main(String[] args) { 
    new B();  
 } 
} 

ANS - Compile Time Error
 
Q15) Find the output of the Program 
 
class Parent  
{ 
    final int x; 
    Parent()  
    { 
        x = 10; 
    } 
} 
 
class Child extends Parent { 
    Child()  
    { 
        System.out.println(x); 
    } 
     
    public static void main(String[] args)  
    { 
        new Child(); 
    } 
} 
 
ANS - 10

Q16) Find the output of this program 
 
class Vehicle 
{ 
 protected String name; 
 
 public Vehicle(String name)  
 { 
  super(); 
  this.name = name; 
 } 
  
 public String printVehicleName() 
 { 
  return "Vehicle is Running"; 
 } 
  
} 
class Car extends Vehicle 
{ 
 public Car(String name)  
 { 
  super(name);   
 } 
  
 public String printVehicleName() // method overiding 
 { 
  return "Car is Running"; 
 } 
} 
 
 
public class Test  
{ 
 public static void main(String[] args)  
 { 
    Car c1 = new Car("Naxon"); 
    String name = c1.printVehicleName(); 
    System.out.println(name); 
 } 
} 

ANS - Car is Running
 
 
Q17) Find the output of this program [Help u to know method calling] 
 
class Base 
{ 
   int value=0; 
   public Base() 
   { 
      addValue(); 
   } 
   void     
   { 
      value += 10; // 40 +10
   } 
   int getValue() 
   { 
      return value; 
   } 
} 
class Derived extends Base 
{ 
      public Derived() 
      { 
       addValue(); 
      } 
      void addValue() // method overiding
      { 
        super.addValue(); 
        value +=  30;  // 0+30 = 30
      } 
    } 
    public class Test50 
    { 
      public static void main(String[] args) 
      { 
          Derived b = new Derived();     
          System.out.println(b.getValue()); 
      } 
    } 

    ANS - 40 
 
Q18) Find the output  
 
class Foo  {  
    public int a = 3;  
    public void addFive() { 
        a += 5; // a = a+5
        System.out.print("f "); 
    }  
}  
class Bar extends Foo {  
    public int a = 8;  
    public void addFive() { 
        this.a += 5; // a = a+5
        System.out.print("b " ); 
    }  
}   

public class Test133  { 
 public static void main(String[] args)  { 
   Foo f = new Foo();  
   f.addFive();  // f 
   System.out.println(f.a); // 8
    
   System.out.println("............"); 
   Bar b = new Bar(); 
   b.addFive(); // b
   System.out.println(b.a); // 13
    
 } 
} 

ANS - 
f 8
b 13
 
Q19) Find the Output 
 
class Grandparent  
{ 
    String name = "grandparent"; 
    void act()  
    { 
        System.out.println(name); 
    } 
} 
 
class Parent extends Grandparent  
{ 
    String name = "parent"; 
} 
 
class Child extends Parent  
{ 
    String name = "child"; 
     
} 
 
public class Test  
{ 
   public static void main(String[] args)  
   { 
        Child yo = new Child(); 
        yo.act(); 
    } 
} 

ANS - grandparent
 
Q20) Find the Output 
 
class Grandparent  
{ 
    String name = "grandparent"; 
    void act()  
    { 
        System.out.println(name); 
    } 
} 
 
class Parent extends Grandparent  
{ 
    String name = "parent"; 
     
    void act()  // Method Hiding
    { 
        System.out.println(name); 
    } 
} 
 
class Child extends Parent  
{ 
    String name = "child"; // data Hiding
     
} 
 
public class Test51
{ 
   public static void main(String[] args)  
   { 
        Child yo = new Child(); 
        yo.act(); 
    } 
} 

ANS - parent

------------------------------------------------------------------------ 
Que 4 : A Hierarchical Model of Animals 
======================================== 
 
Scenario Description: 
 
In a virtual zoo management system, you need to organize and categorize various types of 
animals to efficiently manage their characteristics and behaviors.  
To achieve this, you decide to implement a class hierarchy using multilevel inheritance. 
 
1. Create the Animal Class 
Requirements: 
Define a private String attribute named name. 
Implement a parameterized constructor to initialize name. 
Implement getter and setter methods for name. 
 
 
2. Create the Mammal Class 
Requirements: 
Extend the Animal class. 
Add a private boolean attribute named hasFur. 
Implement a parameterized constructor to initialize name (from Animal) and hasFur. 
Implement getter and setter methods for hasFur. 
 
 
3. Create the Dog Class 
Requirements: 
Extend the Mammal class. 
Add a private String attribute named breed. 
Implement  a  parameterized  constructor  to  initialize  name,  hasFur  (from  Mammal),  and  breed. 
Implement getter and setter methods for breed. 
Generate toString() method to display all the Animal Details. 
 
4. Create the Main Class 
Requirements: 
Create an instance of the Dog class. 
Display details of the Dog object to demonstrate inheritance. 
 
 
Condition : 
----------- 
if any numeric value is zero or negative then print "Error Invalid Input". 
 
 
TEST CASE 1 : 
------------- 
sample input  : When your reading numeric values for any above Classe then make sure if 
any numeric value is <=0 then print "Error Invalid Input". 
                 
sample output : Error Invalid Input 
 
 
 
TEST CASE 2 : 
------------- 
sample input : Dog myDog = new Dog("Buddy", true, "Golden Retriever"); 
                
sample output :  
               Dog Details: 
               Animal Name: Buddy 
               Has Fur: Yes 
               Breed: Golden Retriever

ANS - 

public class Animal {
	private String name;
	public Animal(String name) {
		this.name = name;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
}

public class Mammal extends Animal{
	private boolean hasFur;
	public Mammal(String name, boolean hasFur) {
		super(name);
		this.hasFur = hasFur;
	}
	public boolean isHasFur() {
		return hasFur;
	}
	public void setHasFur(boolean hasFur) {
		this.hasFur = hasFur;
	}
	
}

public class Dog extends Mammal{
	private String breed;

	public Dog(String name, boolean hasFur, String breed) {
		super(name, hasFur);
		this.breed = breed;
	}

	public String getBreed() {
		return breed;
	}

	public void setBreed(String breed) {
		this.breed = breed;
	}

	@Override
	public String toString() {
		return "Dog Details :\n"+"Breed=" + breed + "\n"+"Has Fur=" + isHasFur() +"\n"+"Animal Name=" + getName() + "";
	}
	
}

public class Main {

	public static void main(String[] args) {
		Dog myDog = new Dog("Buddy", true, "Golden Retriever"); 
		System.out.println(myDog);
	}

}
