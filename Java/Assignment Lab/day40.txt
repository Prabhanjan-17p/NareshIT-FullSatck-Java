
/*
1) Most Specific Type :
-----------------------
Compiler alwyas provide more priority to most specific data type or class type.

double > float [Here float is the most specific type]  
float > long 
long > int
int > char     
int > short  //[No relation between short and char]
short > byte     

2) WAV [Widening ->  Autoboxing  -> Var Args]

   Compiler gives the priority to select appropriate method by using the following sequence :
   Widening (Auto type casting) ---> Autoboxing  ----> Var args

3) Nearest Data type or Nearest class (sub class) 
   
   While selecting the appropriate method in ambiguity issue compiler provides priority to nearest data type or nearest class i.e sub class

   NOTE 1 - int - String - boolean are same level or same priority. 
   	    2 - char - short are same level or same priority. 
*/


Q1) Find the Output on Method Overloading with Ambiguity

class Test
{	
	public void accept(long ...b)   
	{
		System.out.println("long :");
	}
	    
	public void accept(double ...s)
	{
		System.out.println("double :");
	}	
	
	public void accept(float ...s)
	{
		System.out.println("float :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();
	}
}

ANS - long :

---------------------------------------------------------------------------
Q2) Find the Output 

class Test
{	
	public void accept(byte ...s)
	{
		System.out.println("byte :");
	}	
	
	public void accept(short ...s)
	{
		System.out.println("short :");
	}	
}
public class AmbiguityDemo2
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();

	}
}

ANS - byte :

------------------------------------------------------------------
Q3) Find the Output 

class Test3
{		    
	public void accept(int ...s)
	{
		System.out.println("int :");
	}	
	
	public void accept(boolean ...s)
	{
		System.out.println("boolean :");
	}	
}
public class AmbiguityDemo3
{
	public static void main(String[] args) 
	{
		Test3 t1 = new Test3();
		t1.accept();

	}
}

ANS - Compile Time Error due to "int and boolean" are same priority

------------------------------------------------------------------
Q4) Find the Output 

class Test
{	
	    
	public void accept(int ...s)
	{
		System.out.println("int :");
	}	
	
	public void accept(short ...s)
	{
		System.out.println("short :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();
	}
}

ANS - short :

---------------------------------------------------------------------------
Q5) Find the Output 

class Test
{		    
	public void accept(int ...s)
	{
		System.out.println("int :");
	}	
	
	public void accept(char ...s)
	{
		System.out.println("char :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();

	}

}

ANS - char :

---------------------------------------------------------------------------
Q6) Find the Output 

class Test
{		    
	public void accept(short ...s)
	{
		System.out.println("short :");
	}	
	
	public void accept(char ...s)
	{
		System.out.println("char :");
	}	
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept();
	}
}

ANS - Compile Time Error because of "short and char" are same priority.

---------------------------------------------------------------------------
Q7) Find the Output 

class Test7
{		    
	public void accept(byte b, int i) {
		System.out.println("byte-int");
	}
	public void accept(int i, byte b) {
		System.out.println("int-byte");
	}
}
public class AmbiguityDemo7
{
	public static void main(String[] args) 
	{
		Test7 t1 = new Test7();  
		t1.accept(1, 2);
	}
}

ANS - Compile Time Error 

---------------------------------------------------------------------------
Q8) Find the Output 

class Test8
{		    
	public void accept(byte b, int i) {
		System.out.println("byte-int");
	}
	public void accept(int i, byte b) {
		System.out.println("int-byte");
	}
}
public class AmbiguityDemo8
{
	public static void main(String[] args) 
	{
		Test8 t1 = new Test8(); 
		byte b1 = 1;
		byte b2 = 2;
		t1.accept(b1, b2);
	}
}

ANS - Compile Time Error due to same priority means same time 2 method are call

---------------------------------------------------------------------------
Q9) Find the Output 

class Test
{		    
	public void accept(int b, int i) {
		System.out.println("int-int");
	}
	public void accept(int i, byte b) {
		System.out.println("int-byte");
	}
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test(); 
		byte b1 = 1;
		byte b2 = 2;
		t1.accept(b1, b2);

	}
}

ANS - int-byte

---------------------------------------------------------------------------
Q10) Find the Output 

class Test
{		    
	public void accept(int b, int i) {
		System.out.println("int-int");
	}
	public void accept(Byte i, int b) {
		System.out.println("byte-int");
	}
	public void accept(Byte b1 , byte b2) {
		System.out.println("Byte-byte");
	}
}
public class AmbiguityDemo1
{
	public static void main(String[] args) 
	{
		Test t1 = new Test(); 
		byte b1 = 1;
		byte b2 = 2;
		t1.accept(b1, b2);
	}
}

ANS - int-int

-----------------------------------------------------------------------
Assignment : 01
---------------

Develop an application for Payment Processing by using Method Overriding and Var args concept.

Develop a super class Payment which contains 3 sub classes CreditCardPayment, DebitCardPayment and UPI.

Coding Requirements :
---------------------
Create a BLC class Payment:

Method to process a payment:

Method Name: processPayment
Access Modifier: public
Return Type: void

Task: Print a generic payment processing message (e.g., "Processing payment").


Subclass CreditCardPayment:

Override processPayment method to print a credit card-specific message:

Method Name: processPayment
Access Modifier: public
Return Type: void

Task: Print a message for credit card payment (e.g., "Processing credit card payment").

Subclass DebitCardPayment:

Override processPayment method to print a debit card specific message:

Method Name: processPayment
Access Modifier: public
Return Type: void
 
Task: Print a message for Debit card payment (e.g., "Processing Debit Card payment").


Subclass UPIPayment:

Override processPayment method to print a UPI Payment-specific message:

Method Name: processPayment
Access Modifier: public
Return Type: void

Task: Print a message for UPI payment (e.g., "Processing UPI payment").


Create an ELC class PaymentProcessing in which take main method and take another static method

Method :

Method to process multiple payments in a single transaction:

Method Name: paymentGateway()
Access Modifier: public
Return Type: void
Arguments: Payment... payments

Task: Loop through each payment and call the processPayment method.

Create instances of CreditCardPayment, DebitCardPayment, and UPIPayment.
Use polymorphism to call the processPayment method on each instance.