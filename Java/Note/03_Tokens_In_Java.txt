28-01-2025
----------
Tokens in java :
----------------
Token is the smallest unit of the program which is identified by the compiler.

Without token we can't complete statement or expression in java.

Token is divided into 5 types in java

  1) Keyword
  2) Identifier
  3) Literal
  4) Punctuators (Seperators)  
  5) Operator
  
Keyword
--------
A keyword is a predefined word whose meaning is already defined by the compiler.

In java all the keywords must be in lowercase only.

A keyword we can't use as a name of the variable, name of the class or name of the method.  

true, false and null look like keywords but actually they are literals.

As of now, we have 67+ keywords in java.
---------------------------------------------------------------------
Identifiers :
--------------
A name in java program by default considered as identifiers.

Assigned to variable, method, classes to uniquely identify them.

We can't use keyword as an identifier. 

Ex:-

class Fan 
{
   int coil  ;
   
   void switchOn()  
   {
   }
}

Here Fan(Name of the class), coil (Name of the variable) and switchOn(Name of the Method) are identifiers.

Rules for defining an identifier :
------------------------------------
1) Can consist of uppercase(A-Z), lowercase(a-z),  digits(0-9), $ sign, and underscore (_)
2) Begins with letter, $, and _
3) It is case sensitive
4) Cannot be a keyword
5) No limitation of length 

--------------------------------------------------------------------
Literals :
----------
Any constant which we are assiging to variable is called Literal.

In java we have 5 types of Literals :

1) Integral Literal
2) Floating Point Literal
3) Boolean Literal
4) Character Literal
5) String Literal

Note : null is also a literal

Integral Literal :
-------------------
If a numeric literal does not contain any decimal or fraction then it is called Integral Literal.

Example : 90, 23, 67, 1234

In Integral literal we have total 4 data types :

 a) byte (8 bits)
 b) short (16 bits)
 c) int (32 bits)
 d) long (64 bits)

An integral literal we can represent in four different forms :
    a) Decimal Literal (Base is 10)
    b) Octal Literal (Base is 8)
    c) Hexadecimal Literal (Base is 16 [0-9 and a - f])
    d) Binary Literal (Base 2) [Available from JDK 1.7v]
    
Decimal Literal :
-----------------
By default our numeric literals are decimal literal. Here base is 10 so, It accepts 10 digits i.e. from 0-9.

Example : 
int x = 20;
int y = 123;
int z = 234;

Octal Literal :
---------------
If any Integer literal starts with 0 (Zero) then it will become octal literal. Here base is 8 so it will accept 8 digits i.e 0 to 7.

Example :

int a = 018; //Invalid becuase it contains digit 8 which is out of range
int b = 0777; //Valid
int c = 0123; //Valid

Hexadecimal Literal :
---------------------
If any integric literal starts with 0X or 0x (Zero capital X Or 0 small x) then it is hexadecimal literal. Here base is 16 so it will accept 16 digits i.e 0 to 9 and A to F OR [a to f]

Example :

int x = 0X12; //Valid
int y = 0xadd; //Valid
int z = 0Xface; //valid
int a = 0Xage; //Inavlid because character 'g' out of range

Binary Literal :
---------------
If a numeric literal starts with 0B (Zero capital B) or 0b (Zero small b) then it will become Binary literal. Binary literal is available from JDK 1.7v.
Here base is 2 so it will accept 2 digits i.e 0 and 1.

Example :
----------
int x = 0B101; //valid
int y = 0b111; //Valid
int z = 0B112; //Invalid [2 is out of range]

The deafult type is decimal literal so to generate the output for any different literal JVM converts into decimal literal.   
---------------------------------------------------------------
29-01-2025
-----------
//Program on Octal Literal
		       
public class Test 
{
	public static void main(String[] args) 
	{
		int x = 015;
		System.out.println(x); //13
	}
}
----------------------------------------------------------------
public class Test2 
{
	public static void main(String[] args) 
	{
		int x = 0Xadd;
		System.out.println(x);
	}
}
----------------------------------------------------------------
public class Test3 
{
	public static void main(String[] args) 
	{
		int x = 0b101;
		System.out.println(x);
	}
}
---------------------------------------------------------------
By default every integral literal is of type int only. byte and short are below than int so we can assign integral literal(Which is by default int type) to byte and short but the values must be within the range. [for Byte -128 to 127 and for short -32768 to 32767]

Actually whenever we are assigning integral literal to byte and short data type then compiler internally converts into corresponding type.


byte b = (byte) 12; [Compiler is converting int to byte]
short s = (short) 12; [Compiler is converting int to short]

In order to represent long value explicitly we should use either L OR l (Capital L OR Small l) as a suffix to integral literal.

According to IT industry, we should use L bacause l looks like digit 1.
----------------------------------------------------------------
/* By default every integral literal is of type int only*/
public class Test4
{
public static void main(String[] args)
	{
                byte b = 128; //error
		System.out.println(b);
		
		short s = 32768; //error
		System.out.println(s);
    }
}
----------------------------------------------------------------
//Assigning smaller data type value to bigger data type
public class Test5
{
public static void main(String[] args)
	{
   	    byte b = 125;  
		short s = b;  //Automatic type casting OR Widening 
		System.out.println(s);
		
		short x = 345;
		int y = x;  //Automatic type casting OR Widening 
		System.out.println(y);
	}
}
---------------------------------------------------------------
//Converting bigger type to smaller type
public class Test6
{
public static void main(String[] args)
	{
	    short s = 127;
		byte b = (byte) s;
		System.out.println(b);	//127
	}
}
--------------------------------------------------------------
public class Test7
 {
 public static void main(String[] args)
 {
		byte x = (byte) 1L;    
		System.out.println("x value  = "+x);

		long l = 29L;
		System.out.println("l value  = "+l);

        int y = (int) 18L; 
		System.out.println("y value  = "+y);
 
  }
 }   
---------------------------------------------------------------- 
30-01-2025
-----------
Is java pure Object Oriented language or not ?
-----------------------------------------------
No, Java is not a pure object oriented langauge because it is accepting primary data type, Actually any language which accepts primary data type is not a pure object oriented language.

Only Objects are moving in the network but not the primary data type so java has introduced Wrapper class concept to convert the primary data types into corresponding wrapper object.

Primary Data type           Wrapper Object
	byte		:	Byte
	short		:	Short
	int		:	Integer
	long		:	Long
	float		:	Float
	double		:	Double
	char		:	Character
	boolean		:	Boolean


Note : Apart from these 8 data types, Everything is an object in java so, if we remove all these 8 primitive data types then java will become pure OOP language.
----------------------------------------------------------------
//Wrapper claases
public class Test8 
{
	public static void main(String[] args) 
	{
		Integer x = 24;  
		Integer y = 24;
		Integer z = x + y;
		System.out.println("The sum is :"+z);	
		
		Boolean b = true;
		System.out.println(b);

		Double d = 90.90;
		System.out.println(d);

		Character c = 'A';
		System.out.println(c);
	}
}

Note : From JAVA 1.5 version we have two conecpt :

AutoBoxing : Converting Primitive to Wrapper Object (int to Integer)
UnBoxing : Converting Wrapper object back to primitive (Integer to int )
----------------------------------------------------------------
How to find out the minimum value, maximum value as well as size of different data types :

The Warpper classes like Byte, Short, Integer and Long has provided predefined static and final variables to represent minimum value, maximum value as well as size of the respective data type.

Example : 

If we want to get the minimum value, maximum value as well as size of byte data type then Byte class (Wrapper class) has provided the following final and static variables

Byte.MIN_VALUE   : -128

Byte.MAX_VALUE   :  127

Byte.SIZE        :  8 (bits format)
---------------------------------------------------------------
 //Program to find out the range and size of Integeral Data type
public class Test9 
{
	public static void main(String[] args) 
	{
		System.out.println("\n Byte range:");
		System.out.println(" min: " + Byte.MIN_VALUE);
		System.out.println(" max: " + Byte.MAX_VALUE);
		System.out.println(" size :"+Byte.SIZE);
 
		System.out.println("\n Short range:");
		System.out.println(" min: " + Short.MIN_VALUE);
		System.out.println(" max: " + Short.MAX_VALUE);
		System.out.println(" size :"+Short.SIZE);

		System.out.println("\n Integer range:");
		System.out.println(" min: " + Integer.MIN_VALUE);
		System.out.println(" max: " + Integer.MAX_VALUE);
		System.out.println(" size :"+Integer.SIZE);

		System.out.println("\n Long range:");
		System.out.println(" min: " + Long.MIN_VALUE);
		System.out.println(" max: " + Long.MAX_VALUE);
		System.out.println(" size :"+Long.SIZE);
		
	}
}
----------------------------------------------------------------
Writing _ symbol in Integral Literal :
---------------------------------------
Java software people has provided to write _ symbol facility while writing the big integral literal numbers so the readability of the number will enhance.

Example : 98_7854_3986

We can't start or end an integral literal with _ we will get compilation error.

//We can provide _ in integral literal [JDK 1.7]
public class Test10 
{
	public static void main(String[] args) 
	{
	    long mobile = 98_1234_5678L;
		System.out.println("Mobile Number is :"+mobile);
	}
}
---------------------------------------------------------------
public class Test11 
{
	public static void main(String[] args) 
	{
		final int x = 127;    
		byte b = x;		
		System.out.println(b);
	}
}

Note : Program will compile and run.
---------------------------------------------------------------

Integer class has provided the following static methods to convert decimal to octal, hexadecimal and binary.

1) public static String toBinaryString(int x) : Will convert the decimal into binary in String format.

2) public static String toOctalString(int x) : Will convert the decimal into octal in String format.

3) public static String toHexString(int x) : Will convert the decimal into hexadecimal in String format.

Note : All the above static methods are available in Integer class.

class Test 
{	
	public static void main(String[] args) 
        {        
	  int x = 15;
	  //Decimal to octal
	  System.out.println(Integer.toOctalString(x));
	  
	  int y = 2781;
	  //decimal to hexadecimal
	  System.out.println(Integer.toHexString(y));
	   
	  int z = 5;
	  //decimal to Binary
	  System.out.println(Integer.toBinaryString(z)); 
	  	   
	}
}
--------------------------------------------------------------
var keyword in java :
---------------------
Java has provided var keyword from java 10V. By using var keyword we can directly assign any type of value to that particular variable.

Using var keyword, Initialization is compulsory in the same line (Compiler will get the information of variable type based on the value)

var keyword is allowed only for local variable.

//var keyword [Introduced from java 10]
public class Test13 
{
	public static void main(String[] args) 
	{
		var x = 100; //Initialization is compulsory here only
		
		//x = "NIT";  //Invalid
		
		x = 900;
		
		System.out.println(x);
			
	}
}
---------------------------------------------------------------
31-01-2025
----------
Floating Point Literal :
------------------------
If any numeric literal contains decimal or fraction then it is called Floating Point Literal.
Example :  45.9, 7.8, 4.5    

In floating point literal we have 2 data types :
1) float (32 bits)
2) double (64 bits)


By default every floating point literal is of type double only so, the following statement will generate compilation error

    float f = 1.2; //Error
    
    In order to represent double value as a float value we can 
    write the following statements :
           float f1 = (float) 12.90;
	   float f2 = 12.66F;
	   float f3 = 56.89f;


As we know by default every floating point literal is of type double only but still compiler has provided two flavors to 
represent the double value explicitly.
      
        double d1 = 10d;
	double d2 = 18D;
	
	
Floating point literal we can represent in exponent form also.
              double d1 = 15e2; [15 X 10 to the power of 2]
	      double d2 = 15e-2;


* Any integral literal (byte, short, int and long) we can assign to floating point literal (float and double) but a floating point literal we can't assign to integral literal. 


* While working with integral literal, we can represent an integral literal in four different forms i.e decimal, octal, 
binary and hexadecimal but floating point literal we can represent in only one form i.e decimal.
  
              double d1 = 0.129; //Valid
	      

 //Programs :
 ------------
 public class Test 
{
	public static void main(String[] args) 
	{
		float f = 0.0; //error
		System.out.println(f);				
	}
}
-------------------------------------------------------
public class Test1 
{
	public static void main(String[] args) 
	{		
		float b = 15.29F;
		float c = 15.25f;
		float d = (float) 15.30;

		System.out.println(b + " : "+c+ " : "+d);
       
	}
}
--------------------------------------------------------------
public class Test2 
{
	public static void main(String[] args) 
	{
		double d = 15.15;
		double e = 15d;
		double f = 90D;
		
		System.out.println(d+" , "+e+" , "+f);
	}
}
----------------------------------------------------------------
public class Test3 
{
	public static void main(String[] args) 
	{
		 double x = 0129.89;  

		 double y = 0167;

		 double z = 0178; //error

		System.out.println(x+","+y+","+z);
	}
}
----------------------------------------------------------------
class Test4 
{
	public static void main(String[] args) 
	{
		double x = 0X29;  

		double y = 0X91.5; //error
		
		System.out.println(x+","+y);
	}
}
---------------------------------------------------------------
public class Test5 
{
	public static void main(String[] args) 
	{
		double d1 = 15e-3;
		System.out.println("d1 value is :"+d1);		

		double d2 = 15e3;
		System.out.println("d2 value is :"+d2);		
	}
}
----------------------------------------------------------------
public class Test6 
{
	public static void main(String[] args) 
	{
		double a = 0791; //Error

		double b = 0791.0; 

		double c = 0777;  

		double d = 0Xdead; 
		
		double e = 0Xdead.0; //Error
	}
}
---------------------------------------------------------------
public class Test7 
{
	public static void main(String[] args) 
	{
	   double a = 1.5e3;  
	   float b = 1.5e3;  //E 
	   float c = 1.5e3F; 	   
	   double d = 10; 	   
	   int e = 10.0;  //E
	   long f = 10D; //E
	   int g = 10F; //E  
	   long l = 12.78F; //E
	}
}
----------------------------------------------------------------
//Range and size of floating point literal 
public class Test8 
{
	public static void main(String[] args)    
	{
		System.out.println("\n Float range:");
		System.out.println(" min: " + Float.MIN_VALUE);
		System.out.println(" max: " + Float.MAX_VALUE); 
		System.out.println(" size :"+Float.SIZE);

		System.out.println("\n Double range:");
		System.out.println(" min: " + Double.MIN_VALUE);
		System.out.println(" max: " + Double.MAX_VALUE);
		System.out.println(" size :"+Double.SIZE);
	}
} 
---------------------------------------------------------------
boolean literal :
-----------------
It is used to represent two states i.e. either true or false.
 
In boolean literal, we have only one data type i.e boolean data type which accepts 1 bit of memory OR depends upon JVM 
implementation.

           boolean isValid = true;
	   boolean isEmpty = false;

Unlike C and C++, We can't assign 0 and 1 to boolean data type because in java 0 and 1 both are representing numeric type (int type)

          boolean x = 0; //[Valid in C and C++ but Invalid in java]
          boolean y = 1; //[Valid in C and C++ but Invalid in java]
  
We can't assign String type to boolean where String contains true or false internally.

               boolean x = "true";  //Invalid
	       
Programs :
-----------
public class Test1
{
    public static void main(String[] args)
    {
        boolean isValid = true;   
        boolean isEmpty = false;
		
        System.out.println(isValid);
        System.out.println(isEmpty);
     }
}


public class Test2
{
    public static void main(String[] args)
    {
	boolean c = 0; //error
        boolean d = 1; //error
        System.out.println(c);
        System.out.println(d);       
    }
}

public class Test3 
{
	public static void main(String[] args) 
	{
		boolean x = "true";  //error
		boolean y = "false";  //error
		System.out.println(x);
                System.out.println(y); 
	}
}
----------------------------------------------------------------
01-02-2025
------------
Character Literal :
-------------------
It is also known as char literal.

In Character literal we have only one data type i.e char data type
which accepts 16 bits of memory.

We can represent character literal in the following ways :

 a) Single character enclosed with single quotes.
    Example :  char ch = 'A'; 
    
 b) We can assign char literal to integral literal data types to know the ASCII value of that particular character literal.    
    Example : int x = 'A';
    
 c) In older langugaes like c and c++, which supports ASCII value    format and the range is 0 - 255, on the other hand java 
    supports UNICODE (ASCII + NON ASCII) value format where the
    range is 0 - 65535.
    
              char ch = 65535; //Valid
    
  d) We can represent char literal in 4 digit hexadecimal format
     to support UNICODE value format.
     
     The format is  '\udddd'
     
     Here u represents it is UNICODE and d represents the digit
     which is in hexadecimal format.
     
     Here the range is :  '\u0000' to '\uffff'
    
   e) All the escape sequences we can represent as Character literal.
             char ch = '\n';
    
Programs :
----------
public class Test1 
{
	public static void main(String[] args) 
	{
		char ch1 = 'a';
		System.out.println("ch1 value is :"+ch1);      
		
	}
}
-------------------------------------------------------------  
public class Test2 
{
	public static void main(String[] args) 
	{
		int ch = 'A';
		System.out.println("ch value is :"+ch);
		
		char ch1 = 'A';
		System.out.println("ch1 value is :"+ch1);
	}
}
----------------------------------------------------------------
//The UNICODE value for ? character is 63 
public class Test3 
{
	public static void main(String[] args) 
	{
		char ch1 = 63;  
		System.out.println("ch1 value is :"+ch1); //?
		
		char ch2 = 64;  
		System.out.println("ch2 value is :"+ch2); //@

		char ch3 = 65; 
		System.out.println("ch3 value is :"+ch3); //A
	}
}
----------------------------------------------------------------
public class Test4 
{
	public static void main(String[] args) 
	{
		char ch1 = 65000;  
        System.out.println("ch1 value is :"+ch1); 

		char ch2 = 0Xadd;  		
		System.out.println("ch2 value is :"+ch2); 
		
		
	}
}

Note : Here we will get the output as ? symbol which represents unknown type character because the language translator is not available in the current system.
----------------------------------------------------------------
//Addition of two character in the form of Integer
public class Test5
{
public static void main(String txt[])
  {
	int x = 'A'; 
    int y = 'B';
    
	System.out.println(x + y); //131	
	System.out.println('A'+'B');//131 
	System.out.println("A"+"B");//AB
   } 
} 
-----------------------------------------------------------------
//Range of UNICODE Value (65535) OR '\uffff'
class Test6 
{
	public static void main(String[] args) 
	{
		char ch1 = 65535; 
		System.out.println("ch value is :"+ch1);

		char ch2 = 65536; //error
		System.out.println("ch value is :"+ch2);
	}
}
--------------------------------------------------------------
//WAP in java to describe unicode representation of char in hexadecimal format
public class Test7 
{
	public static void main(String[] args) 
	{
		int ch1 = '\u0000'; 
		System.out.println(ch1);

		int ch2 = '\uffff';   
		System.out.println(ch2);

		char ch3 = '\u0041'; 
                System.out.println(ch3); //A  

		char ch4 = '\u0061';
		System.out.println(ch4); //a
	}
}
-----------------------------------------------------------------
class Test8 
{
	public static void main(String[] args) 
	{
		char c1 = 'A';
		char c2 = 65;
		char c3 = '\u0041';

		System.out.println("c1 = "+c1+", c2 ="+c2+", c3 ="+c3);
	}
}
-----------------------------------------------------------------
class Test9 
{
	public static void main(String[] args) 
	{
		int x = 'A';
		int y = '\u0041';
		System.out.println("x = "+x+" y ="+y);
	}
}
----------------------------------------------------------------
//Every escape sequence is char literal
class Test10 
{
	public static void main(String [] args) 
	{
		char ch ='\n';
		System.out.println("Hello");
		System.out.println(ch);
		
	}
}
-------------------------------------------------------------------
public class Test11  
{
	public static void main(String[] args) 
	{
		System.out.println("Min Value :"+(int)Character.MIN_VALUE);
		System.out.println("Max Value :"+(int)Character.MAX_VALUE);
		
		int min = '\u0000';
		int max = '\uffff';
       
		System.out.println("Min Value :"+min);
		System.out.println("Max Value :"+max);
		
		
	}
}
---------------------------------------------------------------
03-02-2025
-----------
String Literal :
-----------------
String is a predefined class available in java.lang Package.

String is a collection of alpha-nemeric character which is enclosed by double quotes. These characters can be alphabets, numbers, symbol or any special character.

In java we can create String object by using following 3 ways :

 1) By using String Literal 
    String str1 = "india";    
    
2) By using new keyword 
   String str2 = new String("Hyderabad");
     
3) By using Character array [Old Technique]
   char ch[] = {'R', 'A', 'J'};

Programs :
----------
//Three Ways to create the String Object
public class StringTest1 
{
	public static void main(String[] args) 
	{
		String s1 = "Hello World";       //Literal
		System.out.println(s1);

		String s2 = new String("Ravi"); //Using new Keyword
		System.out.println(s2);

		char s3[] = {'H','E','L','L','O'}; //Character Array 
		System.out.println(s3);

	}
}
--------------------------------------------------------------
//String is collection of alpha-numeric character
public class StringTest2 
{
	public static void main(String[] args) 
	{
		String x="B-61 Hyderabad";
		System.out.println(x);
		
		String y = "123";  
		System.out.println(y);

		String z = "67.90";       
		System.out.println(z);

		String p = "A";        
		System.out.println(p);
	}
}
--------------------------------------------------------------
//IQ
public class StringTest3
{
	public static void main(String []args)
	{		
		String s = 15+29+"Ravi"+40+40; 
		System.out.println(s);	
		
	}
}
--------------------------------------------------------------
4) Punctuators :
----------------
It is  also called separators.

It is used to inform the compiler how things are grouped in the code.

()  {}   []   ;   ,   .   @   ů (var args)  

--------------------------------------------------------------
What is a local variable ?
---------------------------
If a variable is declared inside the body of method OR block OR Constructor then it is called Local /Automatic/ Stack/
temporary variable.

Example :
---------
public void accept()
{
   int x = 100;  //x is a local variable
}

A local variable must be initialized by the developer before 
use because local variable does not have any default value.

We can't apply any kind of modifier on local variable except final.

public void accept()
{
   final int x = 100;  //final is a valid modifier
}

As far as it's scope is concerned, It must be used within the same method body only that menas we can't use local variable outside of the method body/block/constructor.

All local variables are the part of the method body, all the methods are executed in a special memory in java called Stack Memory so local variables are the part of Stack memory.

A local variable must be pre-declared and initialized before use.

public void m1()
{
  System.out.println(x); //error
  int x = 100;
}
--------------------------------------------------------------
Why we can't use local variables outside of the method OR body OR Constructor ?

In java, Every methods are executed in a special memory called
Stack Memory.

Stack Memory works on LIFO (Last In First Out) basis.

In java, Whenever we call a method then a separate Stack Frame will be created for each and every method.[03-FEB]

Once the method execution is over then the corresponding method Stack frame will also be deleted from Stack Area, that is the reason we can't use local variable outside of the method. 

Each stack frame contains 3 parts :
   1) Local Variable Array
   2) Frame Data
   3) Operand Stack

Progarm :
---------
public class LocalVariableScope 
{
	public static void main(String[] args) 
	{
		System.out.println("Main method Started!!!");
		m1();
		System.out.println("Main method ended!!!");
	}
	
	public static void m1()
	{
		System.out.println("M1 method Started!!!");
		m2();
		System.out.println("M1 method ended!!!");
	}
	
	public static void m2()
	{
		System.out.println("Inside the m2 method body!!!");
		int x = 100;
		System.out.println(x);
	}	
	
}
---------------------------------------------------------------
Limitation of Commnd line Argument ?
-------------------------------------
As we know by using Command Line Argument, we can pass some value at runtime, These values are stroed in String array variable and then only the exceution of the program will be started.
In Command line Argumenet we can't ask to enter the value from our end user as shown in the Program.

package com.ravi.command_line_argument;

//Program to read gender [M/F] from the user

public class ReadCharacter 
{
	public static void main(String[] args) 
	{
		System.out.println("Please Enter your Geneder [M/F]");
		char gender = args[0].charAt(0);
		System.out.println("Your Gender is :"+gender);
		
	}

}

Note : In the above program, after providing the gender value, It is asking for Gender which is not a recommended way.

Note : charAt(int indexPosition) is a predefined non static method of String class, which is used to retrieve a character
from the given String.

//Program on charAt(int indexPosition) method :
----------------------------------------------
public char charAt(int indexPosition) 

public class ReadCharacter 
{
	public static void main(String[] args) 
	{
		String str = "India";
		 char ch = str.charAt(0);			   
		System.out.println("0th index character is :"+ch); //I
	}
}

How to read the data from the End user with user friendly mesasage :

There are so many ways we can read the data from client which are as follows :

1) DataInputStream class (java.io)
2) BufferedReader class (java.io)
3) System.in.read()  (java.lang)
4) Console (java.io)
5) Scanner class (java.util)


Scanner class :
----------------