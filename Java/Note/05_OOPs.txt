Object Oriented Programming (OOPs)
-----------------------------------
Object Oriented Progamming means working with real life Objects so first of all we need to know that "What is an Object ?"

What is an Object ?
--------------------
An object is a physical entity which exist in the read world.
Example : Car, Mouse, Remote, Laptop and so on

An Object is having 3 characteristics :

1) Identification of the Object [Name of the Object]
2) State of an Object [Data OR Properties of an Object]
3) Functionality of the Object [What an object can perform]

An Object Oriented programming is a technique through which we can develop and design the programs using CLASS and OBJECT.

Writing Programs on real life Objects is known as Object Oriented Progamming.

In OOPs we concentrate on Objects rather than function(Method).

Advantages of OOPs :
-------------------
There are 3 advantages :

1) Modularity (Dividing the bigger task into number of smaller task)
2) Reusability (We can reuse the BLC classes [WORA])
3) Flexibility (Easy to maintain [Interface])

Features Of OOPs :
------------------
There are six features :

1) Class
2) Object
3) Abstraction
4) Encapsulation
5) Inheritance
6) Polymorphism

11-02-2025
-----------
What is a class :
-------------------
A class is a model/bluprint/template/prototype for creating the Object. Object creation is possible by using class template.

A class is a logical entity which does not take any space.

A class is user-defined data type which contains fields and methods.

Example :
---------
public class Demo
{
   Fields 
     + 
   Methods
}

*A class is a component which is used to defined Object properties and Object behavior.
 
 public class Student
 {
    Fields [Student Properties]    
      +      
    Methdos [Student Behavior]
 }
 
---------------------------------------------------------------------
WAP to provide student properties and student behavior by using OOP.
(Diagram is available)

Student.java
--------------
package com.ravi.oop;

//BLC
public class Student 
{
	int rollNumber;         //Non static variable
	String studentName;     //Non static variable
	String studentAddress;  //Non static variable
	
	public void talk()
	{
		System.out.println("My name is :"+studentName);
		System.out.println("Roll number is :"+rollNumber);		
		System.out.println("Address is :"+studentAddress);
	}

	public void writeExam()
	{
		System.out.println("Hello Everyone !!!, My name is :"+studentName+ " every saturday we have weekly test");
	}
	
	
}

StudentDemo.java
-----------------
package com.ravi.oop;

//ELC
public class StudentDemo 
{
	public static void main(String[] args) 
	{
		Student  raj = new Student();
		//Initializing the properties through reference variable
        raj.rollNumber = 111;
        raj.studentName = "Raj";
        raj.studentAddress ="Ameerpet";
        
        //calling the behavior
        raj.talk();
        raj.writeExam();
        
        System.out.println("-------------------");
        
        Student priya = new Student();
        //Initializing the properties through reference variable
        priya.rollNumber = 222;
        priya.studentName = "Priya";
        priya.studentAddress = "S R Nagar";
        
        //calling the Behavior
        priya.talk();
        priya.writeExam();
        
	}

}

Steps to develop OOP :
----------------------
1) Create BLC and ELC class.
2) Create an Objec for BLC class, inside the ELC class in the main 
   method.
3) Think about Object properties and behavior and write inside the 
   BLC class.
4) In the ELC class, With the help of Object reference initialize
   all the Object properties.
5) By using Object reference call the methods.
-----------------------------------------------------------------
12-02-2025
----------
Instance Variable OR Non static Field :
---------------------------------------
Instance variable we can declare at class level.

If a non static variable is declared inside the class but outside of the method then it is called Instance Variable OR Non static field.

Example :
---------
public class Student
{
  int rollNumber;  //Instance Variable OR Non static field
  
  public void m1()
  {
  }
}

An instance variable is automatically created and initialized with default value at the time of Object creation. [We can't even think about instance variable without object creation]

public class Test 
{
	int x = 200; //Instance Variable OR Non static filed
	
	public static void main(String[] args) 
	{
		System.out.println(x);	//error
	}
}

An instance variable is used to represent the properties of an object hence without object instance variable will not exist.

As far as it's scope is concerned, An instance variable can be accessible anywhere within the class as well as outside of the class also using valid access modifier.

Whenever we create an object, a separate copy of all the instance variables will be created.
----------------------------------------------------------------
Initializing the Object properties using Method without parameter (Using Scanner class) :
----------------------------------
package com.ravi.method_initialization;

import java.util.Scanner;

public class Employee 
{
   int employeeNumber;  //0
   String employeeName; //null
   double employeeSalary; //0.0
   
   public void setEmployeeData()
   {
	   Scanner sc = new Scanner(System.in);
	   System.out.print("Enter employee Number :");
	   employeeNumber = sc.nextInt();
	   System.out.print("Enter employee Name :");
	   employeeName = sc.nextLine();
	   employeeName = sc.nextLine();
	   System.out.print("Enter employee Salary :");
	   employeeSalary = sc.nextDouble();	  
   }
   
   public void getEmployeeData()
   {
	   System.out.println("Employee Number is :"+employeeNumber);
	   System.out.println("Employee Name is :"+employeeName);
	   System.out.println("Employee Salary is :"+employeeSalary);
   }  
   
}

package com.ravi.method_initialization;

public class EmployeeDemo 
{
	public static void main(String[] args) 
	{
		Employee scott = new Employee();
		scott.setEmployeeData();
		scott.getEmployeeData();
		
		System.out.println(".............");
		
		Employee smith = new Employee();
		smith.setEmployeeData();
		smith.getEmployeeData();		
		
	}

}
----------------------------------------------------------------
What is parameter variable ?:
-----------------------------
If a variable is declared inside a method as a parameter (not inside a method body) then it is parameter variable.

It used to recieve the values from the outer world so the end user will provide the values and these values are recieved by 
parameter variable in the program.

Initializing the object properties using parameter variable :
-------------------------------------------------------------
package com.ravi.initialization_through_parameter;

public class Customer 
{
    int customerId;
    String customerName;
    
    public void setCustomerData(int id, String name)
    {
    	customerId = id;
    	customerName = name;
    }
    
    public void getCustomerData()
    {
    	System.out.println("Customer Id is :"+customerId);
    	System.out.println("Customer Name is :"+customerName);
    } 
    
}

package com.ravi.initialization_through_parameter;

public class CustomerDemo 
{
	public static void main(String[] args) 
	{
		Customer martin = new Customer();
		martin.setCustomerData(111, "Mr Martin");
		martin.getCustomerData();
		
		System.out.println("..............");
		
		Customer alen = new Customer();
		alen.setCustomerData(222, "Mr. Alen");
		alen.getCustomerData();		
		
	}

}

Note : Upto here, We know total 3 ways to initialize the object
properties (instance variable) which are as follows :
  
   1) Using Object reference(raj.rollNumber = 122)
   2) Using Method without parameter (Scanner class)
   3) Using Method with Parameter (Park Story)
----------------------------------------------------------------
What is a constructor [Constructor Introduction]
-----------------------------------------------
If the name of the class and name of the method both are exactly same and it should not contain any return type then it is called constructor. 

Example :

Case 1:
-------
public class Demo
{
   public void Demo() //Method
   {
   }
}   

Case 2:
-------
public class Demo
{
   public  Demo() //Constructor
   {
   }
}   
-----------------------------------------------------------------


