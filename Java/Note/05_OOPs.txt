Object Oriented Programming (OOPs)
-----------------------------------
Object Oriented Progamming means working with real life Objects so first of all we need to know that "What is an Object ?"

What is an Object ?
--------------------
An object is a physical entity which exist in the read world.
Example : Car, Mouse, Remote, Laptop and so on

An Object is having 3 characteristics :

1) Identification of the Object [Name of the Object]
2) State of an Object [Data OR Properties of an Object]
3) Functionality of the Object [What an object can perform]

An Object Oriented programming is a technique through which we can develop and design the programs using CLASS and OBJECT.

Writing Programs on real life Objects is known as Object Oriented Progamming.

In OOPs we concentrate on Objects rather than function(Method).

Advantages of OOPs :
-------------------
There are 3 advantages :

1) Modularity (Dividing the bigger task into number of smaller task)
2) Reusability (We can reuse the BLC classes [WORA])
3) Flexibility (Easy to maintain [Interface])

Features Of OOPs :
------------------
There are six features :

1) Class
2) Object
3) Abstraction
4) Encapsulation
5) Inheritance
6) Polymorphism

11-02-2025
-----------
What is a class :
-------------------
A class is a model/bluprint/template/prototype for creating the Object. Object creation is possible by using class template.

A class is a logical entity which does not take any space.

A class is user-defined data type which contains fields and methods.

Example :
---------
public class Demo
{
   Fields 
     + 
   Methods
}

*A class is a component which is used to defined Object properties and Object behavior.
 
 public class Student
 {
    Fields [Student Properties]    
      +      
    Methdos [Student Behavior]
 }
 
---------------------------------------------------------------------
WAP to provide student properties and student behavior by using OOP.
(Diagram is available)

Student.java
--------------
package com.ravi.oop;

//BLC
public class Student 
{
	int rollNumber;         //Non static variable
	String studentName;     //Non static variable
	String studentAddress;  //Non static variable
	
	public void talk()
	{
		System.out.println("My name is :"+studentName);
		System.out.println("Roll number is :"+rollNumber);		
		System.out.println("Address is :"+studentAddress);
	}

	public void writeExam()
	{
		System.out.println("Hello Everyone !!!, My name is :"+studentName+ " every saturday we have weekly test");
	}
	
	
}

StudentDemo.java
-----------------
package com.ravi.oop;

//ELC
public class StudentDemo 
{
	public static void main(String[] args) 
	{
		Student  raj = new Student();
		//Initializing the properties through reference variable
        raj.rollNumber = 111;
        raj.studentName = "Raj";
        raj.studentAddress ="Ameerpet";
        
        //calling the behavior
        raj.talk();
        raj.writeExam();
        
        System.out.println("-------------------");
        
        Student priya = new Student();
        //Initializing the properties through reference variable
        priya.rollNumber = 222;
        priya.studentName = "Priya";
        priya.studentAddress = "S R Nagar";
        
        //calling the Behavior
        priya.talk();
        priya.writeExam();
        
	}

}

Steps to develop OOP :
----------------------
1) Create BLC and ELC class.
2) Create an Objec for BLC class, inside the ELC class in the main 
   method.
3) Think about Object properties and behavior and write inside the 
   BLC class.
4) In the ELC class, With the help of Object reference initialize
   all the Object properties.
5) By using Object reference call the methods.
-----------------------------------------------------------------
12-02-2025
----------
Instance Variable OR Non static Field :
---------------------------------------
Instance variable we can declare at class level.

If a non static variable is declared inside the class but outside of the method then it is called Instance Variable OR Non static field.

Example :
---------
public class Student
{
  int rollNumber;  //Instance Variable OR Non static field
  
  public void m1()
  {
  }
}

An instance variable is automatically created and initialized with default value at the time of Object creation. [We can't even think about instance variable without object creation]

public class Test 
{
	int x = 200; //Instance Variable OR Non static filed
	
	public static void main(String[] args) 
	{
		System.out.println(x);	//error
	}
}

An instance variable is used to represent the properties of an object hence without object instance variable will not exist.

As far as it's scope is concerned, An instance variable can be accessible anywhere within the class as well as outside of the class also using valid access modifier.

Whenever we create an object, a separate copy of all the instance variables will be created.
----------------------------------------------------------------
Initializing the Object properties using Method without parameter (Using Scanner class) :
----------------------------------
package com.ravi.method_initialization;

import java.util.Scanner;

public class Employee 
{
   int employeeNumber;  //0
   String employeeName; //null
   double employeeSalary; //0.0
   
   public void setEmployeeData()
   {
	   Scanner sc = new Scanner(System.in);
	   System.out.print("Enter employee Number :");
	   employeeNumber = sc.nextInt();
	   System.out.print("Enter employee Name :");
	   employeeName = sc.nextLine();
	   employeeName = sc.nextLine();
	   System.out.print("Enter employee Salary :");
	   employeeSalary = sc.nextDouble();	  
   }
   
   public void getEmployeeData()
   {
	   System.out.println("Employee Number is :"+employeeNumber);
	   System.out.println("Employee Name is :"+employeeName);
	   System.out.println("Employee Salary is :"+employeeSalary);
   }  
   
}

package com.ravi.method_initialization;

public class EmployeeDemo 
{
	public static void main(String[] args) 
	{
		Employee scott = new Employee();
		scott.setEmployeeData();
		scott.getEmployeeData();
		
		System.out.println(".............");
		
		Employee smith = new Employee();
		smith.setEmployeeData();
		smith.getEmployeeData();		
		
	}

}
----------------------------------------------------------------
What is parameter variable ?:
-----------------------------
If a variable is declared inside a method as a parameter (not inside a method body) then it is parameter variable.

It used to recieve the values from the outer world so the end user will provide the values and these values are recieved by 
parameter variable in the program.

Initializing the object properties using parameter variable :
-------------------------------------------------------------
package com.ravi.initialization_through_parameter;

public class Customer 
{
    int customerId;
    String customerName;
    
    public void setCustomerData(int id, String name)
    {
    	customerId = id;
    	customerName = name;
    }
    
    public void getCustomerData()
    {
    	System.out.println("Customer Id is :"+customerId);
    	System.out.println("Customer Name is :"+customerName);
    } 
    
}

package com.ravi.initialization_through_parameter;

public class CustomerDemo 
{
	public static void main(String[] args) 
	{
		Customer martin = new Customer();
		martin.setCustomerData(111, "Mr Martin");
		martin.getCustomerData();
		
		System.out.println("..............");
		
		Customer alen = new Customer();
		alen.setCustomerData(222, "Mr. Alen");
		alen.getCustomerData();		
		
	}

}

Note : Upto here, We know total 3 ways to initialize the object
properties (instance variable) which are as follows :
  
   1) Using Object reference(raj.rollNumber = 122)
   2) Using Method without parameter (Scanner class)
   3) Using Method with Parameter (Park Story)
----------------------------------------------------------------
What is a constructor [Constructor Introduction]
-----------------------------------------------
If the name of the class and name of the method both are exactly same and it should not contain any return type then it is called constructor. 

Example :

Case 1:
-------
public class Demo
{
   public void Demo() //Method
   {
   }
}   

Case 2:
-------
public class Demo
{
   public  Demo() //Constructor
   {
   }
}   
-----------------------------------------------------------------
13-02-2025
-----------

Default constructor added by compiler :
---------------------------------------
In java, Whenever we write a class and If we don't write any kind of constructor then automatically compiler will add one 
default no argument constructor in the class at the time of compilation.

Demo.java
-----------
public class Demo
{
   //Programmer has not provided any constructor
}

javac Demo.java (Compilation)
[After compilation Demo.class file will be generated]

Demo.class
----------
public class Demo
{
  public Demo() //Default No Argument Constructor [Added by 
  {                                             java compiler]
  }
}

*Every java class must have at-least one constructor either 
 explicitly written by user OR implicitly added by java compiler.

The access modifier of default no argument constructor [added by java compiler] will depend upon class access modifier that means, If the class is public then default no argument constructor will also be public otherwise not.

Example :
---------
public class Test
{
}

javac Test.java [java compiler will compile and add default 
                 constructor]

javap Test.class [To see the Constructor added by java compiler]
-----------------------------------------------------------------

Why compiler is adding default constructor to our class :
---------------------------------------------------------
We have 2 reasons that why compiler is adding default constructor :

1) Without default constructor, Object creation is not possible in java by using new keyword, if the class does not contain user-defined constructor.

2) As we know only class level variables are having default values so, new keyword will initialize all the non static variable with the support of java compiler with default values as shown below.
  
 Data type - Default value
   byte  - 0
   short - 0
   int   - 0
   long  - 0
   float - 0.0
   double - 0.0
   char - (space) '\u0000'  
   boolean - false
   String - null
   Object - null (For any class i.e reference variable the default value is null)

Program that describes new keyword is repsonsible to allocate 
the default values for non static variables :

Student.java
-------------
package com.ravi.oop;

public class Student 
{
   int roll;
   String name;
         
   public void show()
   {
	   System.out.println(roll);  //0
	   System.out.println(name);  //null
   }
}
StudentDemo.java
-----------------
package com.ravi.oop;

public class StudentDemo 
{
	public static void main(String[] args) 
	{
		Student raj = new Student();
		raj.show();
		

	}

}

Here we will get output as default values i.e 0 , null 
---------------------------------------------------------------
How to initialize the object properties with parameter variable as per our requirement :

Based on the requirement we can initailize the instance variable with parameter variable as shown in the program below :

package com.ravi.oop;

public class Employee 
{
   int employeeId;
   String employeeName;
   double employeeSalary; 
   char employeeGrade;
   
   public void setEmployeeData(int id, String name, double salary)
   {
	   employeeId = id;
	   employeeName = name;
	   employeeSalary = salary;
   }
   
   public void calculateEmployeeGrade()
   {
	   if(employeeSalary >=100000)
	   {
		   employeeGrade = 'A';
	   }
	   else if(employeeSalary >=75000)
	   {
		   employeeGrade = 'B';
	   }
	   else if(employeeSalary >=50000)
	   {
		   employeeGrade = 'C';
	   } 
	   else
	   {
		   employeeGrade = 'D';
	   }
	   
   }
   
   
   
   public String getEmployeeData()
   {
	   return "[Id is :"+employeeId+", Name is :"+employeeName+", Salary is "+employeeSalary+", Grade is :"+employeeGrade+"]";
   } 
   
}
package com.ravi.oop;

public class EmployeeDemo {

	public static void main(String[] args) 
	{
		Employee scott = new Employee();
		scott.setEmployeeData(101, "Scott", 120000);
		scott.calculateEmployeeGrade();
		System.out.println(scott.getEmployeeData());

	}

}
---------------------------------------------------------------
14-02-2025
-----------
Role of instance variable OR Non static field (Object Properties)
while creating an object.

In java, Whenever we create an object, a separate copy of all the instance variables will be created with each and every object.


package com.ravi.role_of_instance_variable;

public class Test
{
   int x = 100;
   
   public static void main(String [] args)
   {
       Test t1 = new Test();
       Test t2 = new Test();
       
       ++t1.x;   --t2.x;       
       
       System.out.println(t1.x); //101       
       System.out.println(t2.x); //99 
   }
}
----------------------------------------------------------------
What is the role of class variable OR static field in Object creation ?

What is a static field ?
------------------------
It is a variable which we should declare at class level.

If we declare a variable inside a class with static modifier then it is called static field OR Class Variable.

In order to access the static field, Object is not required, We can access the static field with the help of class name.

A static field is automatically created and initialized with default value at THE TIME LOADING THE .CLASS FILE INTO JVM MEMORY.

Whenever we create an object in java then a single copy of static field will be created and the same single copy will be sharable by all the objects.

* It is sharable by all the objects hence if we modify the value
  by any of the Object reference then it will be mofifiable for
  all the objects.

package com.ravi.role_of_static_field;

public class Demo 
{
	static int x = 100;

	public static void main(String[] args)
	{
		Demo d1 = new Demo();
		Demo d2 = new Demo();
		
		++d1.x;   ++d2.x;
		
		System.out.println(d1.x); //102
		System.out.println(d2.x); //102
	}
}

Note : The main purpose of static field to save the memory.
----------------------------------------------------------------
When we should declare a variable as an instance and we should decalre as static variable ?

Instance Variable :
-------------------
If the value of the variable is different with respect to object 
then we should declare the variable as an instance variable.

Static Variable :
-----------------
If the value of the variable will be common with respect to all the objects then we should use static variable.

Example 1:
----------
public class Student
{
  int roll;
  String name;
  String address;
  static String collegeName = "NIT";
  static String courseName = "Java";
}  

Example 2:
-----------
public class Customer
{
   int accountNumber;
   String customerName;
   String customerAddress;
   long mobileNumber;
   String emailId;
   static String ifscCode = "SBIHYD00123";
   static String branchLocation ="S.R Nagar";
}
----------------------------------------------------------------
//Programs :
------------
2 files :
------------
Student.java
-------------
package com.ravi.role_of_instance_variable;

public class Student
{
	  int rollNumber;
	  String studentName;
	  String studentAddress;
	  static String collegeName = "NIT";
	  static String courseName = "Java";
	  
	  public void setStudentData(int roll, String name, String address)
	  {
		 rollNumber = roll;
		 studentName = name;
		 studentAddress = address;
	  } 
	  
	  public void showStudentData()
	  {
		  System.out.println("Roll Number is :"+rollNumber);
		  System.out.println("Name is :"+studentName);
		  System.out.println("Address is :"+studentAddress);
		  System.out.println("College Name is :"+collegeName);
		  System.out.println("Course is :"+courseName);		  
	  }  
}

package com.ravi.role_of_instance_variable;

public class VariableDeclaration {

	public static void main(String[] args) 
	{
		Student raj = new Student();
		raj.setStudentData(101, "Raj", "Ameerpet");
		raj.showStudentData();
		
		System.out.println("...............");
		Student priya = new Student();
		priya.setStudentData(102, "Priya", "S.R Nagar");
		priya.showStudentData();

	}

}
================================================================
What is variable shadow ?
-------------------------
If class level variables and method level variables are having exactly same name then method level variable will hide class level variable inside the method body OR constructor OR block, This concept is known as Variable Shadow.

package com.ravi.role_of_instance_variable;

class Customer
{
	int customerId = 111;
	String customerName = "Scott";
	double customerBill = 12000;
	
	public void show(double customerBill)
	{
		int customerId = 222;
		String customerName = "Alen";
		
		System.out.println(customerId); //222
		System.out.println(customerName); //Alen	
		System.out.println(customerBill); //18000	
		
	}
	
}

public class VariableShadow {

	public static void main(String[] args) 
	{
		Customer cust = new Customer();
		cust.show(18000);

	}

}
----------------------------------------------------------------
this keyword in java :
----------------------
Whenever instance variable name and parameter variable name both are same then at the time of instance variable initialization our runtime environment will provide more priority to parameter variable/local variable, parameter variables are hiding the instance variables (Due to variable shadow)

To avoid the above said problen, Java software people introduced "this" keyword.

this keyword always refers to the current object and instance variables are the part of the object so by using this keyword we can represent instance variable.

We cannot use this (non static member) keyword from static area (Static context)[static method, static block and static nested ineer class]

2 files :
----------
Manager.java
-------------
package com.ravi.this_keyword;

public class Manager 
{
   int managerId;
   String managerName;
   
   public void setManagerData(int managerId, String managerName)
   {
	  this.managerId = managerId;
	  this.managerName = managerName;
	   
   } 
	
   public void getManagerData()
   {
	 System.out.println("Manager Id is :"+managerId);  
	 System.out.println("Manager Name is :"+managerName);  
   }   
	
}

ManagerDemo.java
-----------------
package com.ravi.this_keyword;

public class ManagerDemo {

	public static void main(String[] args)
	{
		Manager alen = new Manager();
		alen.setManagerData(111, "Alen");
        alen.getManagerData();
	}

}
----------------------------------------------------------------
Program on Local search algorithm :[Diagram 15-FEB]

package com.ravi.this_keyword;

class Test
{
	static int a = 100;  //static Field 
	int b = 200; //Non static Field
	
	public void accept(int c)   //Parameter Variable
	{
		int d = 400;  //Local Variable
		System.out.println("Static Field :"+Test.a);
		System.out.println("Non Static Field :"+this.b);
		System.out.println("Parameter Variable :"+c);
		System.out.println("Local Variable :"+d);
	}
}
public class LocalSearchAlgorithm 
{
	public static void main(String[] args) 
	{
		Test t1 = new Test();
		t1.accept(300);
	}

}
===============================================================
17-02-2025
-----------
**What is Data Hiding ?
----------------------
Data hiding is nothing but declaring our data members with private access modifier so our data will not be accessible from outer world that means no one can access our data directly from  outside of the class.

*We should provide the accessibility of our data through methods so we can perform VALIDATION ON DATA which are coming from outer world.


package com.ravi.data_hiding;

public class Customer 
{
   private double balance = 10000;  //Data Hiding
   
   public void deposit(double amount)
   {
	   //Data Validation
	   if(amount <=0)
	   {
		   System.err.println("Amount can't deposited");
		   System.exit(0);
	   }
	   else
	   {
		   this.balance = this.balance + amount;
		   System.out.println("Balance After Deposit is :"+this.balance);
	   }
   }
   
   public void withdraw(double amount)
   {
	   if(amount > this.balance)
	   {
		   System.err.println("Withdraw is not possible, Low Balance");
	   }
	   else
	   {
		   this.balance = this.balance - amount;
		   System.out.println("Balance After Withdraw is :"+this.balance);
	   }
	   
   } 
   
}

package com.ravi.data_hiding;

public class DataHidingDemo {

	public static void main(String[] args) 
	{
		Customer scott = new Customer();
		scott.deposit(1000);
		scott.withdraw(5000);
	}

}
-----------------------------------------------------------------
How to print Object properties (Non static field) by using toString() method :

In java, There is a class called Object class available in java.lang pacakage. This class is by default the super class for all the classes in java.

Any predefined OR user-defined class in java, can use the method of Object class directly because Object is the super class.

In Object there is a predefined non static method called toString(), Any java class can override this toString() methdo to perform some common operation.

              public String toString();

* If we want to print our object properties i.e instance variables in String format then we can override toString() method in the respective class.

* This toString() method is available in Object class and we can generate using Eclipse IDE in our program 

Right click on the Program -> source -> generate toString()

How to call toString() method :
--------------------------------
If we pass our object reference to the System.out.println() statement then automatically it will call toString() method of the corresponding class.

Example :
---------
Manager raj = new Manager();
System.out.println(raj); //It will call toString() method of 
                           Manager class


Player virat = new Player();
System.out.println(virat); //It will call toString() method of 
                           Player class


Programs :
----------
package com.ravi.to_string;

public class Player {
	private int playerId;
	private String playerName;
	private double basePrice;

	public void setPlayerData(int playerId, String playerName, double basePrice) {
		this.playerId = playerId;
		this.playerName = playerName;
		this.basePrice = basePrice;
	}

	@Override
	public String toString() {
		return "Player [playerId=" + playerId + ", playerName=" + playerName + ", basePrice=" + basePrice + "]";
	}

}

package com.ravi.to_string;

public class PlayerDemo {

	public static void main(String[] args)
	{
		Player virat = new Player();
		virat.setPlayerData(18, "Virat Kohli", 2000000);
		System.out.println(virat);
		
		System.out.println("...................");
		Player rohit = new Player();
		rohit.setPlayerData(45, "Rohit Sharma", 3999990);
		System.out.println(rohit);
		
	}

}
---------------------------------------------------------------
Constructor :
-------------
What is the advantage of writing constructor in our class ?
------------------------------------------------------------
If we don't write a constructor in our program then variable initialization and variable re-initialization both are done in two different lines.

If we write constructor in our program then variable initialization and variable re-initialization both are done in the same line i.e at the time of Object creation. [17-FEB]

With Constructor approach, we need not to depend on method to re-initialize our instance variable with user value.

18-02-2025
-----------
Constructor Defination :
------------------------
It is used to construct the object that is the reason it is known as Constructor.

If the name of the class and name of the method both are exactly same and it does not contain any return type then it is called Constructor.

Example :
---------
public class Student
{
   public Student()  //Constructor
   {
   }

   public void Student() //Method
   {
   }
}

Program :
---------
package com.ravi.constructor;
public class Student 
{
  public void Student()
  {
	  System.out.println("It is a method");
  }
}


package com.ravi.constructor;

public class ConstructorDemo {

	public static void main(String[] args) 
	{
		System.out.println("Main");
		
		Student s1 = new Student();
		s1.Student(); //Calling the Method
	}

}

The main purpose of constructor to initialize the instance variable i.e to initialize the Object properties.

A constructor never contain any return type including void also.

Every class in java must have at-least one constructor, either
explicitly written by developer OR implicitly added by java compiler.

Whenever we create an object in java by using new keyword, at-least one constructor must be invoked.

A constructor is automatically called and executed at the time of creating the Object. [We need not to call manually like method]

A default constructor will be added by compiler in the class, in case user has not provided any type of constructor in the class.

The access modifier of default constructor will depend upon the class access modifier.

A Constructor is called only once per object that means if we create multiple objects then multiple time constructor will be invoked.

Types of Constructor :
-----------------------
In java we have total 3 types of Constructor :

1) Default No Argument Constructor [Added by java Compiler]

2) No Argument OR Non parameterized OR Zero Argument 
   constructor [Written by user without parameter]
   
3) Parameterized Constructor.   
   

Default Constructor :
---------------------
Whenever we write a class and if we don't write any type of constructor then automatically a default no argument constructor will be added by java compiler.

The main purpose of this default no argument constructor to accept default values with the help of new keyword and java compiler.

Example :
---------
Example.java 
--------------
public class Example 
{

}

javac Example.java
-------------------
public class Example
{
   public Example() //Default No Argument Constructor 
   {
   }
}
---------------------------------------------------------------
No Argument Constructor :
-------------------------
If a user is writing constructor in the class without any parameter then it is called No Argument Constructor.

Employee.java
--------------
public class Employee
{
  public Employee() //No Argument Constructor
  {
  }
}
  
In this approach, all the objects will be initialized with same value (as shown in the program) so, it is not a recommended way because every object must have unique values.  
  
package com.ravi.no_args_constr;

public class Person {
	private int personId;
	private String personName;
	private int personAge;

	public Person() // No Argument Constructor
	{
		this.personId = 101;
		this.personName = "Scott";
		this.personAge = 24;
	}

	@Override
	public String toString() {
		return "Person [personId=" + personId + ", personName=" + personName + ", personAge=" + personAge + "]";
	}

}


package com.ravi.no_args_constr;

public class PersonDemo {

	public static void main(String[] args) 
	{
		Person scott = new Person();
		System.out.println(scott);
		
		System.out.println("..........");
		
		Person smith = new Person();
		System.out.println(smith);
		

	}

}

Note : Here both the objects will be initialized with same value so better to use Parameterized Constructor.

Parameterized Constructor :
----------------------------
If we pass one or more argument to the constructor then it is called parameterized constructor.

The main purpose of paramterized constructor to initialize the instance variable of the class with different values.

Example :
----------
public class Customer
{
   private int customerId;
   private String customerName;
   
   public Customer(int customerId, String customerName)
   {
      this.customerId = customerId;
      this.customerName = customerName;
   }
}

//Program on Parameterized Constructor :
-----------------------------------------
Dog.java
---------
package com.ravi.parameterized_constructor;

public class Dog 
{
	private String dogName;
	private int dogAge;
	private double dogHeight;
	private String dogColor;
	
		
	public Dog(String dogName, int dogAge, double dogHeight, String dogColor) 
	{
		super();
		this.dogName = dogName;
		this.dogAge = dogAge;
		this.dogHeight = dogHeight;
		this.dogColor = dogColor;
	}

	@Override
	public String toString() 
	{
		return "Dog [dogName=" + dogName + ", dogAge=" + dogAge + ", dogHeight=" + dogHeight + ", dogColor=" + dogColor
				+ "]";
	}

}


ParameterizedConstructor.java
------------------------------
package com.ravi.parameterized_constructor;

public class ParameterizedConstructor {

	public static void main(String[] args) 
	{
		Dog tommy = new Dog("Tommy", 3, 2.3, "Grey");
		System.out.println(tommy);

		System.out.println("...............");
		Dog tiger = new Dog("Tiger", 5, 4.4, "Black");
		System.out.println(tiger);
	}

}
--------------------------------------------------------------
Upto here, by using following ways we can initialize the Object Properties :
-----------------------------------------------------------------
1) By using Object reference
2) By using Method without parameter
3) By using Method With Parameter
4) At the time of variable declaration
5) Using No Argument Constructor
6) Using parameterized Constructor [Best Approach]
---------------------------------------------------------------
IQ :
----
return keyword added by java compiler :
---------------------------------------
Whenever we write a method with void keyword OR we are writing constructor then at the last statement of method as constructor, automatically compiler will add one return statement so the control will return back to the caller method.

Demo.java
-----------
public class Demo 
{
	public void m1()
	{
		
	}
}

javac Demo.java
---------------
Demo.class
-----------

public class Demo 
{
	public void m1()
	{
	
		return;
	}
}

The following command is used to verify the return statement provided by java compiler.

javac Demo.java

javap -c Demo.class

Constructor with return statement :
-----------------------------------
package com.ravi.no_args_constr;

class Student
{
	public Student()
	{
		System.out.println("Student Constructor");
		return;
	}
	
	public int m1()
	{
		System.out.println("It is a method");
		return 10;
	}
		
}


public class ConstructorWithReturn {

	public static void main(String[] args) 
	{
		Student s1 = new Student();
        System.out.println(s1.m1());
	}

}
--------------------------------------------------------------
How to modify the existing Object data ?
-----------------------------------------
In order to modify the existing Object data, we should use setter concept, On the other hand to read the private variable value from BLC class to any other class we should use getter concept.

How to write setter and getter for instance variable ?
------------------------------------------------------
public class Employee
{
  private double salary;   //[Data hiding]
   
  public Employee(double salary)
  {
    this.salary = salary;
  }
 
  public void setSalary(double salary)  //setter                     {
    this.salary = salary;
  }
   
  public double getSalary() //getter
  {                                                   
     return this.salary;
  }
}
--------------------------------------------------------------

FINAL CONCLUSION :
-------------------
Parameterized Constructor : To initialize the Object properties with user values.

Setter : To modify the existing object data.[Only one data at a time] OR Writing/Overriding Operation

Getter : To read/retrieve private data value outside of BLC class. [Reading Operation]

toString() : To print Object properties (Instance Variable)

-------------------------------------------------------------
*** What is Encapsulation 
--------------------------
[Accessing our private data with public methods like setter and getter]
--------------------------------
Binding the private data with its associated method in a single unit is called Encapsulation.

Encapsulation ensures that our private data (Object Properties) must be accessible via public methods like setter and getter.

It provides security because our data is private (Data Hiding) and it is only accessible via public methods WITH PROPER DATA VALIDATION.

In java, class is the example of encapsulation.


How to achieve encapsulation in a class :
------------------------------------------
In order to achieve encapsulation we should follow the following two 
techniques :

1) Declare all the data members with private access modifiers (Data Hiding OR Data Security)

2) Write public methods to perform read(getter) and write(setter) operation on these private data like setter and getter.

Note : If we decalre all our data with private access modifier then it is called TIGHTLY ENCAPSULATED CLASS. On the other hand if we declare our data other then private access modifier then it is called Loosely Encapsulated class.

Program on Encapsulation :
---------------------------
package com.ravi.encapsulation;

public class Employee 
{
	private int employeeId;
	private String employeeName;
	private double employeeSalary;

	public Employee(int employeeId, String employeeName, double employeeSalary) 
	{
		super();
		this.employeeId = employeeId;
		this.employeeName = employeeName;
		this.employeeSalary = employeeSalary;
	}

	@Override
	public String toString() 
	{
		return "Employee [employeeId=" + employeeId + ", employeeName=" +  employeeName + ", employeeSalary="
				+ employeeSalary + "]";
	}

	public int getEmployeeId() 
	{
		return this.employeeId;
	}

	public void setEmployeeId(int employeeId) 
	{
		this.employeeId = employeeId;
	}

	public String getEmployeeName() 
	{
		return this.employeeName;
	}

	public void setEmployeeName(String employeeName) 
	{
		this.employeeName = employeeName;
	}

	public double getEmployeeSalary() 
	{
		return this.employeeSalary;
	}

	public void setEmployeeSalary(double employeeSalary)
	{
		this.employeeSalary = employeeSalary;
	}
	
}

package com.ravi.encapsulation;

import java.util.Scanner;

public class EncapsulationDemo {

	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter Employee Id :");
		int id = sc.nextInt();
		System.out.print("Enter Employee Name :");
		String name = sc.nextLine();
		name = sc.nextLine();
		System.out.print("Enter Employee Salary :");
		double salary  = sc.nextDouble();
		
		Employee scott = new Employee(id, name, salary);
		System.out.println("Original Data :"+scott);
		
		System.out.print("Enter the updated Salary :");
		double increment = sc.nextDouble();
		
		if(increment <= 0)
		{
			System.err.println("Increment amount must be positive");
		}
		else
		{		
		scott.setEmployeeSalary(scott.getEmployeeSalary() + increment);
		System.out.println("After Salary Increment :"+scott);
		}
		
		/*Based on the Salary print whether the Employee is Developer, Designer
		  OR Tester
		   Salary >= 50000  -> Developer
		   Salary >= 35000  -> Designer
		   else Tester		
		*/
		
		double employeeSalary = scott.getEmployeeSalary();
		
		if(employeeSalary >=50000)
		{
			System.out.println(scott.getEmployeeName()+" is a Developer");
		}
		else if(employeeSalary >=35000)
		{
			System.out.println(scott.getEmployeeName()+" is a Designer");
		}
		else
		{
			System.out.println(scott.getEmployeeName()+" is a Tester");
		}		
		sc.close();		
	}

}
--------------------------------------------------------------
Method return type as a class :
-------------------------------
While declaring a method in java, return type is compulsory.
As a method return type we have following options

1) void as a retutn type of the Method

2) Any primitive data type as a return type of the method.

3) Any class name/interface / enum / record we can take as a return type of the method.

Program on Method return type as a class :
-------------------------------------------
package com.ravi.method_return_type;

public class Demo
{
	public Demo(int x)
	{
		
	}
	
		
    public Demo m1()
    {
    	//return null;
    	
    	//return new Demo(10);
    	
    	Demo d1 = new Demo(100);
    	return d1;    	
    }
}

Note : In the above program, in order to return the value we depend upon current class constructor.

--------------------------------------------------------------
What is a Factory Method ?
--------------------------
If a method return type is class that means that method will return current object then that type of method is known as Factory Method.

Example :

public class Sample
{   
    public Sample getSampleObject()
    {
    
       return new Sample(); //to return this value we depend
    }                          on Sample class default constr
 }
--------------------------------------------------------------
//Program on Static Factory Method :
-------------------------------------
2 files :
---------
Book.java
----------
package com.ravi.static_factory_method;

public class Book 
{
	private String author;
	private String title;
	private double price;

	public Book(String author, String title, double price)
	{
		this.author = author;
		this.title = title;
		this.price = price;
	}
	
	public String toString() 
	{
		return "Book [author=" + author + ", title=" + title + ", price=" + price + "]";
	}


	//Static Factory Method
	public static Book getBookObject()
	{
		Book b1 = new Book("James", "Java", 1200);
		return b1;
	}
	
}

BookDemo.java
--------------
package com.ravi.static_factory_method;

public class BookDemo {

	public static void main(String[] args) 
	{
	   Book book =	Book.getBookObject();
       System.out.println(book);
	}

}

Note : In the above program, getBookObject() method returns the Book object but as we know a method is mainly used for
reusability purpose but here we are receiving only object

The following program explains, how to get multiple object from the static factory method.

2 files : 

Customer.java
--------------
package com.ravi.static_factory_method;

import java.util.Scanner;

public class Customer 
{
	private int customerId;
	private String customerName;
	private double customerBill;

	public Customer(int customerId, String customerName, double customerBill) {
		super();
		this.customerId = customerId;
		this.customerName = customerName;
		this.customerBill = customerBill;
	}

	@Override
	public String toString() 
	{
		return "Customer [customerId=" + customerId + ", customerName=" + customerName + ", customerBill="
				+ customerBill + "]";
	}

	public static Customer getCustomerObject()
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter Customer Id :");
		int id = sc.nextInt();
		
		System.out.print("Enter Customer Name :");
		String name = sc.nextLine();
		name = sc.nextLine();
		
		System.out.print("Enter Customer Bill :");
		double bill = sc.nextDouble();
		
		Customer c1 = new Customer(id, name, bill);
		return c1;		
	}
	
	
	
}

CustomerDemo.java
------------------
package com.ravi.static_factory_method;

import java.util.Scanner;

public class CustomerDemo {

	public static void main(String[] args)
	{
	   Scanner sc = new Scanner(System.in);
	   System.out.println("How many objects you want to create :");
	   int noOfObj = sc.nextInt();
	   
	   for(int i=1; i<=noOfObj; i++)
	   {
		     Customer customer = Customer.getCustomerObject();
		     System.out.println(customer);
	   }
	   
	   sc.close();
	      
	}

}
--------------------------------------------------------------
What is Shallow and Deep copy in java :
----------------------------------------
Shallow Copy :
--------------
In Shallow copy, Only one Object will be created but the same object will be refered by multiple reference variables.

If we modify the object properties by any of the reference variable then original object will be modified as shown in the program :

2 files :
---------
package com.nit.shallow_copy;

public class Product {
	private int productId;
	private String productName;
	private double productPrice;

	public Product(int productId, String productName, double productPrice) 
	{
		super();
		this.productId = productId;
		this.productName = productName;
		this.productPrice = productPrice;
	}

	@Override
	public String toString() {
		return "Product [productId=" + productId + ", productName=" + productName + ", productPrice=" + productPrice
				+ "]";
	}

	public int getProductId() {
		return productId;
	}

	public void setProductId(int productId) {
		this.productId = productId;
	}

	public String getProductName() {
		return productName;
	}

	public void setProductName(String productName) {
		this.productName = productName;
	}

	public double getProductPrice() {
		return productPrice;
	}

	public void setProductPrice(double productPrice) {
		this.productPrice = productPrice;
	}
	
}

package com.nit.shallow_copy;

public class ProductDemo {

	public static void main(String[] args) 
	{
		Product p1 = new Product(111, "M Series", 22000);
		System.out.println(p1);
		
		Product p2 = p1;		
		System.out.println(p2);
		
		System.out.println("..................");
		p2.setProductId(222);
		p2.setProductName("X Series");
		p2.setProductPrice(25000);		
		
		System.out.println("After Modification");
		System.out.println(p1);
		System.out.println(p2);
		
	}
}

Note : Here in shallow copy by using p2 reference variable we are modifying the content of object by using setter method, p1 and p2 both are pointing to the same object so original object will modify (20-FEB-25)
--------------------------------------------------------------
Deep copy :
-----------
In deep copy we will create more than one object.

Here 2nd object will copy the content of first object.

Since, Objects are created in two different memory location so, if we modify the content of one object then another object content will remain unchangd.

2 files :
----------
package com.ravi.deep_copy;

public class Laptop
{
	private String laptopBrand;
	private double laptopPrice;

	public Laptop(String laptopBrand, double laptopPrice) {
		super();
		this.laptopBrand = laptopBrand;
		this.laptopPrice = laptopPrice;
	}	
	
	public Laptop()
	{		
	}
	

	@Override
	public String toString() {
		return "Laptop [laptopBrand=" + laptopBrand + ", laptopPrice=" + laptopPrice + "]";
	}

	public String getLaptopBrand() {
		return laptopBrand;
	}

	public void setLaptopBrand(String laptopBrand) {
		this.laptopBrand = laptopBrand;
	}

	public double getLaptopPrice() {
		return laptopPrice;
	}

	public void setLaptopPrice(double laptopPrice) {
		this.laptopPrice = laptopPrice;
	}

}

package com.ravi.deep_copy;

public class DeepCopy
{
   public static void main(String[] args) 
   {
	   Laptop obj1 = new Laptop("HP", 90000);
	   Laptop obj2 = new Laptop();
	   
	   obj2.setLaptopBrand(obj1.getLaptopBrand());
	   obj2.setLaptopPrice(obj1.getLaptopPrice());
	   
	   System.out.println(obj1);
	   System.out.println(obj2);
	   
	   System.out.println("====================");
	   
	   //Modifying Object1 data
	   obj1.setLaptopBrand("Apple");
	   obj1.setLaptopPrice(150000);

	   System.out.println(obj1);
	   System.out.println(obj2); 
	   
	   
   }
}

Note : Here when we modify the object 1 data (Apple, 1500000)
the 2nd object data will remain unchanged because two different Objects are created in two different memory location.
------------------------------------------------------------
***Pass by Value :
-----------------
Java does not support pointers so java only works with pass by value.

Pass by value means we are sending the copy of orginal data to the method.
--------------------------------------------------------------
package com.ravi.pass_by_value;

public class PassByValueDemo1 {

	public static void main(String[] args) 
	{
		int x = 100;
		m1(x);
		System.out.println("x value is :"+x);
	}
	
	public static void m1(int val)
	{
		val = 200;		
	}

}

Output is : 100
--------------------------------------------------------------
package com.ravi.pass_by_value;

public class PassByValueDemo2
{
	public static void main(String[] args) 
	{		
        int x = 100;
        int y = accept(x);
        System.out.println(x +" : "+y);
	}
	public static int accept(int val)
	{
		val = 500;
		return val;
	}
	
}
-------------------------------------------------------------
package com.ravi.pass_by_value;

class Product
{
	private double price = 12000;

	public double getPrice() 
	{
		return price;
	}

	public void setPrice(double price) 
	{
		this.price = price;
	}
}

public class PassByValueDemo3 {

	public static void main(String[] args) 
	{
		Product p1 = new Product();
		System.out.println(p1.getPrice()); //12000		
		accept(p1);		
		System.out.println("After Method calling :");
		System.out.println(p1.getPrice());//18000		
	}

	public static void accept(Product prod)
	{
		prod.setPrice(18000);
	}	
}
-------------------------------------------------------------
package com.ravi.pass_by_value;

class Customer 
{
	private double customerBill = 12000;

	public double getCustomerBill() 
	{
		return customerBill;
	}

	public void setCustomerBill(double customerBill)
	{
		this.customerBill = customerBill;
	}
}

public class PassByValueDemo4 
{
	public static void main(String[] args)
	{
		Customer c1 = new Customer(); 
		System.out.println(c1.getCustomerBill()); //12000
		
		accept(c1);
		System.out.println("After Method Calling :");
		System.out.println(c1.getCustomerBill()); //12000		
	}
	
	public static void accept(Customer cust)  //cust = c1
	{
		cust = new Customer();
		cust.setCustomerBill(25000);
	}
}

Output is 12000 and 12000
=============================================================


