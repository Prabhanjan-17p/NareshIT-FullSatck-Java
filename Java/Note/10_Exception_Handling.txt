Exception Handling :
--------------------
An exception is an abnormal situation OR un-expected situation in a normal execution flow.

Due to an exception, the execution of the program will be disturbed first and then terminated permanently.

Exception always encounter at runtime only.

Exception encounter due to the following reasons :

  1) The Wrong input given by the user.
  2) Due to dependency, When one part of the program is dependent to another part to complete the task then there might be a chance of getting an exception. 
  
Different Criteria for Exception :
-----------------------------------
1) java.lang.ArithmeticException :
----------------------------------
If we divide a number by zero (an int value) then at runtime we will get an exception i.e java.lang.ArithmeticException 

                  int x = 18; 
		  int y = 0; 
		  int z = x/y;
  
2) java.lang.ArrayIndexOutOfBoundException :
---------------------------------------------
 If we try to access the index of an array which is not available then we will get java.lang.ArrayIndexOutOfBoundsException 
  
  int []arr = {10,20};
  System.out.println(arr[3]);
  
3) java.lang.NumberFormatException
-----------------------------------
If we try to convert the String into corresponding int(primitive) OR Wrapper(Integer) and if the String is not in a numeric format then we will get runtime exception i.e java.lang.NumberFormatException. 

Case 1:
-------
String str = "NIT";
int val = Integer.parseInt(str);
System.out.println(val);
  
Case 2:
--------
String str = "India";
Integer val = Integer.valueOf(str);
System.out.println(val);  
  
4) java.lang.NullPointerException :
-----------------------------------
If any reference variable is pointing to null and by using the reference variable we are calling any non static field OR non static method then we will get java.lang.NullPointerException.

Case 1 :
--------
String str = null;
System.out.println(str.toUpperCase());

Case 2 :
---------
String s1 = "null";
System.out.println(s1.length());
System.out.println(s1.toUpperCase());

Case 3 :
---------
Scanner sc = new Scanner(System.in);
System.out.println("Enter a String value :");
String s1 = sc.nextLine(); //"null"
System.out.println(s1.length()); //4

5) java.lang.NegativeArraySizeException
---------------------------------------
Whenever we create an array, the size of the array must be positive
integer only otherwise we will get java.lang.NegativeArraySizeException

int []arr = new int[-12];

6) java.lang.StringIndexOutOfBoundsException 
---------------------------------------------
If we try to access the String index (String is character array) but if the index is out of the range then we will get 
java.lang.StringIndexOutOfBoundsException 

String str = "Hyderabad";
System.out.println(str.substring(2,-5)); 

Note : ArrayIndexOutOfBoundsException class StringIndexOutOfBoundsException class both are sub class of java.lang.IndexOutOfBoundsException.


7) java.util.InputMismatchException :
-------------------------------------
While reading the value using Scanner class, We should always read 
appropriate value other we will get java.util.InputMismatchException

Scanner sc = new Scanner(System.in);
System.out.println("Enter a number :");
int num = sc.nextInt(); //If we don't read int value then exception
System.out.println(num); 
=======================================================================
Exception Hierarchy :
---------------------
Paint Digram [10th April]

Note :- As a developer we are responsibe to handle the Exception. System admin is responsibe to handle the error because we cannot recover from error.
----------------------------------------------------------------------
Q) WAP to show that Exception is the super class of all types of 
   Exception whether it is checked Or unchecked

Ans : From the Exception Hierarchy, It is clear that java.lang.Exception is the super class for all type of Exception whether it is checked OR Unchecked.

package com.ravi.exception_demo;

import java.io.IOException;

public class ExceptionDemo 
{
	public static void main(String[] args)
	{
		Exception e1 = new ArithmeticException();
		System.out.println(e1);
		
		Exception e2 = new ArrayIndexOutOfBoundsException();
		System.out.println(e2);
		
                Exception e3 = new IOException();
                System.out.println(e3);		
	}

}
-----------------------------------------------------------------------
What is Exception Format ?
---------------------------
Whenever we print any Exception Object then the by default format is :
FUlly Qualified Name : error Message

Example :

Exception e1 = new ArithmeticException("My error message");
System.out.println(e1.toString());	

java.lang.ArithmeticException:My error message
-----------------------------------------------------------------------
WAP that desribes, whenever an exception is encounter in the 
program then our program will be terminated abnormally (halt in the middle)

package com.ravi.exception_demo;

import java.util.Scanner;

public class AbnormalTermination {

	public static void main(String[] args) 
	{
		System.out.println("Main Method started..");
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the value of x :");
		int x = sc.nextInt();
		System.out.print("Enter the value of y :");
		int y = sc.nextInt();
		
		int result = x /y;
		System.out.println("Result is :"+result);
		System.out.println("Main Method ended..");
		sc.close();		
	}

}

In the above progran, If we put the value of y as 0 then the program will halt in the middle which is known as abnormal termination.

By default, JVM has default exception handler which will handle the 
execption, terminate the program in the middle (abnormal termination)
and generate the exception message.
-----------------------------------------------------------------------
11-04-2025
----------
In order to handle the exception and to work with exception. Java software people has provided the following keywords :

1) try block
2) catch block
3) finally block [Java 1.7V, try with resourses]
4) throw keyword
5) throws keyword


try block :
-----------
Whenever our statement is error suspecting statement OR Risky statement then we should write that statement inside the try block.

try block must be followed either by catch block or finally block or both.

*try block is responsible to trace our code line by line, if any execption is encountered then with the help of JVM, TRY BLOCK WILL CREATE APPROPRIATE EXECPTION OBJECT, AND THROW THIS EXCEPTION OBJECT to the nearest catch block.

After the execption in the try block, the remaining code of try block will not be executed because control will directly transfer to the catch block.

In between try and catch block we cannot write any kind of statement.

catch block :
--------------
The main purpose of catch block to handle the exception which is thrown by try block.

catch block will only executed if there is an exception in the try block.
-----------------------------------------------------------------------
package com.ravi.exception;

import java.util.Scanner;

public class TryDemo {

	public static void main(String[] args)
	{
		 System.out.println("Main method Started!!!");
					
		   Scanner sc = null;
			try
			{
				sc = new Scanner(System.in);
				System.out.print("Enter the value of x :");
				int x = sc.nextInt();
				
				System.out.print("Enter the value of y :");
				int y = sc.nextInt();
				
				int result = x/y;
				
				System.out.println("Result is :"+result);
				System.out.println("End of try block");
			}
			catch(Exception e)
			{
				System.out.println("Inside Catch block");
				System.err.println(e);
			}			
			System.out.println("Main method Completed!!!");
			sc.close();
	}

}

In the above program if we put the value of y as 0 but still program will be executed normally because we have used try-catch so it is a 
normal termination even we have an exception in the program.
-----------------------------------------------------------------------
In case on any Exception in the try block, try block is responsible to create (with the help of JVM) exception object and throw the exception object to the nearest catch block but user can also explicitly create and throw the Exception object as shown below.

public class TryDemo 
{
	public static void main(String[] args) 
	{
		try
		{
		   throw new ArithmeticException();
		   //System.out.println(10/0);
		}
		catch(Exception e)
		{
			System.out.println("Catch Block");
			System.err.println(e);
		}
		
		System.out.println("Main Completed");
	}
}


After throw keyword we can't write any kind of statement, It 
will become un-reachable code. 
----------------------------------------------------------------------
package com.ravi.exception;

class Demo extends Throwable
{
	public Demo(String errorMessage)
	{
		super(errorMessage);
	}
}

public class ThrowableException
{
	public static void main(String[] args)
	{
		try
		{
		   throw new Demo("demo error");	
		}
		catch(Throwable e)
		{
			System.err.println(e.toString());
		}
	}

}

Note : If our Demo class does not extend from any of the Exception class OR Throwable class then this Demo Object is not a Throwable type of object hance we can't use throw keyword.
-----------------------------------------------------------------------
Without Exception Handling, If exception = Abnormal termination.
With Exception Handling, If exception = Normal Termination.

The actual use of Exception Handling :
--------------------------------------
 The main purpose of exception handling to provide user-friendly message so client can enjoy the services of software/websites.   

Exception handlinag = No Abnormal Termination + User-friendly message on wrong input given by the client.

package com.ravi.exception;

import java.util.Scanner;

public class CustomerDemo 
{
	public static void main(String[] args) 
	{
		System.out.println("Hello Client, Welcome to my Application :");
		Scanner sc = new Scanner(System.in);
		
		try
		{
			System.out.print("Please enter the value of x :");
			int x = sc.nextInt();
			System.out.print("Please enter the value of y :");
			int y = sc.nextInt();
			
			int result = x /y;
			System.out.println("Result is :"+result);
		}
		catch(Exception e)
		{
			System.err.println("Please don't put zero here");
		}
		sc.close();
		System.out.println("Thank you Client, Please Visit Again!!");
	}

}
----------------------------------------------------------------------














