{ errors.UserName?.type.required===true }

 { (errors.UserName?.type==="required")?msg:msg }

Summary
- Formik
- Hook Form

                      Controlled Components
- A component comprises of reusable design and functionality.
- Uncontrolled components have same design and functionality to use everywhere.
- A controlled component can change the design and functionality according to state and situation.
- It is controlled by the data passed from parent component.
- Design and functionality are controlled using "Properties". [ props ]
- A controlled component is a function with props as parameters.

Syntax:
    function  Component(props)
    {

    }

- "props" is a formal parameter, which is object type. It comprises of key and value.

    return(
          <div>
            {   props.key }
           </div>
         )

- The values into key are passed from parent component.

        <Component   key={value} />

Ex:
1. controlled-component/navbar.jsx


export function Navbar(props){
    return(
        <nav className={`d-flex ${props.theme} justify-content-between p-3 align-items-center border border-2`}>
            <div>
                <span className="fs-4 fw-bold">{props.brandName}</span>
            </div>
            <div>
                {
                    props.menuItems.map(item=> <span key={item} className="mx-4"> {item} </span>)
                }
            </div>
            {
                (props.signin===true)?
                 <div>
                <button className="btn btn-danger">Signin</button>
                </div>
                :null
            }
        </nav>
    )
}

2. components/hook-form-demo.jsx

import { useForm } from "react-hook-form";
import { Navbar } from "../../controlled-components/navbar";


export function HookFormDemo(){


    const {register, handleSubmit, formState:{errors}} = useForm();

    const submit = (values) => {
        console.log(values);
    }

    return(
        <div className="container-fluid">
            <header className="mt-4">
                <Navbar signin={true} theme="bg-dark text-white" brandName="Shopper." menuItems={['Home', 'Shop', 'Pages', 'Blogs', 'Docs', 'Contact']} />
            </header>

            <header className="mt-4">
                <Navbar theme="bg-warning text-white" brandName="Amazon" menuItems={['Electronics', 'Fashion', 'Offers']} />
            </header>
            <h3>Register User</h3>
            <form onSubmit={handleSubmit(submit)}>
                <dl>
                    <dt>User Name</dt>
                    <dd><input type="text" name="UserName" {...register("UserName", {required:true, minLength:4})} /></dd>
                    <dd className="text-danger">
                        {
                           ( errors.UserName?.type==="required") ? <span>User Name Required</span> : <span></span> &&
                           ( errors.UserName?.type==="minLength") ? <span>Name too short</span>: <span></span>
                        }
                    </dd>
                    <dt>Mobile</dt>
                    <dd><input type="text" name="Mobile" {...register("Mobile", {required:true, pattern:/\+91\d{10}/})} /></dd>
                    <dd className="text-danger">
                        {
                           ( errors.Mobile?.type==="required") ? <span>Mobile Required</span> : <span></span> &&
                           ( errors.Mobile?.type==="pattern") ? <span>Invalid Mobile</span>: <span></span>
                        }
                    </dd>
                </dl>
                <button type="submit">Submit</button>
            </form>
           
        </div>
    )
}

Ex: Data grid

1. controlled-components/data-grid.jsx


export function DataGrid(props)
{
    return(
        <table className={`table table-hover caption-top`}>
            <caption>{props.caption}</caption>
            <thead>
                <tr>
                    {
                        props.fields.map(field=><th key={field}> {field} {(props.sorting===true)?<button className="btn bi bi-sort-alpha-down"></button>:null}  </th>)
                    }
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {
                    props.data.map((record,index)=>
                        <tr key={index}>
                            {
                                Object.keys(record).map(key=> <td key={key}>{record[key]}</td>)
                            }
                            <td>
                                <button className="btn btn-danger bi bi-trash"></button>
                                <button className="btn btn-warning bi bi-pen mx-2"></button>
                                <button className="btn btn-primary bi bi-eye"></button>
                            </td>
                        </tr>
                    )
                }
            </tbody>
        </table>
    )
}

2. components/custom-demo.jsx

import { DataGrid } from "../../controlled-components/data-grid";


export function CustomDemo(){

    return(
        <div className="container-fluid">
            <h2>Employee</h2>
            <DataGrid sorting={true} caption="Employees Data Table" fields={['First Name', 'Last Name', 'Designation', 'Salary']} data={[{FirstName:'Raj', LastName:'Kumar', Designation:'Developer', Salary:56000}, {FirstName:'Kiran', LastName:'Kumar', Designation:'Admin', Salary:46000}]} />
            <h2>IPL Points Table</h2>
            <DataGrid caption="Playoff's Table" fields={['TEAM', 'WON', 'LOST', 'NRR', 'PTS']} data={[{Team:'MI', Won:2, Lost:1, NRR:0.56, PTS:4}]} />
        </div>
    )
}

                        Conditional Rendering