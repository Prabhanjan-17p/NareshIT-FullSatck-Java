Routing in Next App:
1. Add folders into "src/app"

        app/fashion/page.js
        app/electronics/page.js

2. Go to "layout.js" in "src" folder

3. It is a view of Next application. View generates application UI. It is managed by a view engine.

4. Next JS router provides file based routing which allows to configure navigation using "<Link>" component. It uses "href" to configure any path.

Syntax:
        <Link  href={'/fashion'}> Fashion </Link>

5. The resulting marking is rendered using {children } outlet.

Ex: layout.js

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Link from "next/link";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <header className="p-4">
           <nav className="text-center">
               <span> <Link href={'/fashion'}> Fashion </Link> </span>
               <span className="mx-4"> <Link href={'/electronics'}> Electronics </Link> </span>
           </nav>
        </header>
        <section>
            {children}
        </section>
      </body>
    </html>
  );
}

Server Side Rendering:
- Every component of Next JS framework is by default a server component.
- To configure manually client and server components you have to use the directives.

        a) Use Server
        b) Use Client

- Directive is responsible for providing meta data that is required for a compiler to compile and process the component.

Syntax:
       'Use Server'
   
        export default async function Component()        
        {
          render (<div> </div>)
            }

- Server side interactions are configured without any DOM methods.
- Server side data fetching can be handled only by using "fetch()" API.
- Fetch API is a window method, how ever Next can use in server side rendering as it renders a layout of HTML with the help of View Engine.
- Client side data fetching can be managed by using client libraries like axios.

Ex:  app/fakestore/page.js
 'use server'

  export default async function Fakestore() {

    const data = await fetch('https://fakestoreapi.com/products/categories&#39;);
    const categories = await data.json();

    return(
        <div>
            <h2>Fakestore API</h2>
            <ul>
                {
                    categories.map(category=> <li key={category}>{category}</li>)
                }
            </ul>
        </div>
    )
}

- Client component is configured using the directive "use client".
- It can use all virtual DOM methods and hooks.
- It can be a controlled component or uncontrolled component.

Note: You can access a client component using server route but make sure that it is
      marked with "use client" and defined in "app" folder.

Ex:
  app/products/page.js

'use client'
import { useEffect, useState } from "react"

export default function Products(){

    const [products, setProducts] = useState([]);

    async function GetProducts(){
        const data =  await fetch('https://fakestoreapi.com/products&#39;);
        const result = await data.json();
        setProducts(result);
    }

    useEffect(()=>{
        GetProducts();
    },[])

    return(
        <div>
            <h4>Products</h4>
            <ul>
                {
                    products.map(product=> <li key={product.id}>{product.title}</li>)
                }
            </ul>
        </div>
    )
}

Ex: Server Side Rendering

1.  app/fakestore/page.js

import Products from "../products/page";

export default async function Fakestore() {

    const data = await fetch('https://fakestoreapi.com/products/categories&#39;);
    const categories = await data.json();

    const productsData = await fetch('https://fakestoreapi.com/products&#39;);
    const products = await productsData.json();

    return(
        <div>
            <h2>Fakestore API</h2>
            <ul>
                {
                    categories.map(category=> <li key={category}>{category}</li>)
                }
            </ul>
            <main className="mt-4">
                <Products products={products} ></Products>
            </main>
        </div>
    )
}


2. app/products/page.js

'use client'
import { useEffect, useState } from "react"

export default function Products({products}){


    const [filtered, setFiltered] = useState([]);

    useEffect(()=>{
       
    },[])

    function handleChange(e){
        const result = products.filter(product=> product.title.toLowerCase().includes(e.target.value));
        setFiltered(result);
    }

    return(
        <div>
            <h4>Products</h4>
            <div className="my-2">
                <input type="text" onChange={handleChange} placeholder="Search product" />
            </div>
            <div className="d-flex">
                {
                    filtered.map(product=> <div key={product.id} className="d-flex">
                        <img  src={product.image} width={100} height={100} />
                    </div>)
                }
            </div>
        </div>
    )
}

Debug / Test / Deploy