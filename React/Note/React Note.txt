1. What is React?
	- It is a JavaScript library for building IJI. [ https://legacy.reactjs.org/]
	- It is a JavaScript library for web and native Ul. [ https://react.dev/ ]

2. What is difference between Angular & React?
	- Angular is a framework.
	- React is a library.
	- If app have lot of framework in backend, it needs just a good Ul - React
	- If app have less framework features in backend what a rich front end - Angular

Note: Angular is not an alternative for React and vice versa.

3. Why we need Angular and React?
	- To build SPA & PWA(Single Page Application & Page W Application)

4. What are the challenges in modern web development?
	* Unified UX
	- Application must have same experience across various devices.
	- Mobile users must get access to everything.
	* Fluid UX
	- User stays on one page and can get access to everything from the page.
	- Technically it requires lot of AJAX.
	* Loosely coupled & extensible
	- It allows to build and plugin new features without disturbing existing.
	- It should add new functionality without leading to catastrophic failures.
	* It must follow all web principles
	- Accessibility
	- Internationalization
	- privacy
	- Security

5. What is solution?
	- Better build SPA & PWA.	
	- Earlier we were building Multi Page Applications.

6. How to build SPA?
	- By using JavaScript, jQuery, React, Angular, Vue, Knockout JS, Back Bone JS etc.

7. What are the issues with JavaScript & jQuery ?
	- Lot of DOM interactions
	- Lot of coding
	- Heavy on application
	- Slow in interactions etc..


Features of React:
1. It is component based.
	- It is easy to build interactive UI.
	- It is faster in building UI.
	- It enable reusability, extensibility, testability and maintainability.
	- It enables loosely coupled and extensible architecture.

2. It uses "Virtual DOM".	
    - It is faster in interactions.
	- It is faster in rendering. 

3. It is a modular library
	- It enable reusability and extensibility.
	- It enables separation and testability.
	- It is light weight and faster.
	- It uses application specific functions.  	

4. It uses async techniques
	- It uses unblocking mechanism.
	- It allows to run multiple tasks parallelly.
	- It improves performance of application.


*** FAQ's:
1. What is DOM?
	- DOM is a hierarchy of elements in page.(elements are stand in hierachy order)

2. What is shadow DOM?
	- It is a hierarchy of elements in a component.
	- It uses a shadow root for components in page.
	- It comprises of of elements hierarchy and styles with logic inside component.

3. What is virtual DOM?
	- It is a copy of actual DOM.
	- It is in the memory that update and renders output to client.
	- However it have to update actual DOM for final rendering.

4. Issues with React:
	- It is not designed for what you are using.
	- Hence lot of GAP's.
	- You have to fill the GAPS by using lot of 3rd party integrations.
	- Virtual DOM is not always satisfying.


*** FAQ's:
1. Is there any difference between React & React JS?
	- Now. React can be used with JavaScript & TypeScript.

NOTE - React latest is 19x [beta].
	   React LTS is 18x [GA].
	   React upto 18x are different in library and approach.
	   React 18x version is a complete re-write of React.
	   React is backward compatible.
			-backward compatible(Means We can used old version to bulid your app)
			-Side by side execution(Means We can used old and new version to make a app)
	   

*** React in existing Web-Application
1. Install Node JS on your PC, make sure that the version of Node is 14x above.
	- Node JS is an open source JavaScript runtime.
	- Developers require Node JS to build Web Apps, Servers, CLI tools & Scripts.
	- Install Node JS gets a Package Manager. [ NPM ]
	- After install check the version from command prompt
		> node -v
		> npm -v
2. Download and Install Visual Studio Code Editor.
3. Install plugins for VS code
	- Live Server
	- vs-code icon
	- IntelliSense for CSS class name in HTML
	- Live Preview 
4. Create a new Web-Application
	- Create a new folder for application.
	- Create a new folder for application
	D:\NareshIt\Fullstack-Java-NareshIT\React\web-app
	- Open folder in VS code
	- Setup traditional web application development environment
	a) Setup package.json
		> npm jnjt -y [ package.json ]
	b) Add "README.md"
	c) Add folders
		- public(all static resource)
		- src(all dynamic resource)


Work With Fetch API:


Issues with Fetch:
- It returns data in binary
- It requires explicit conversions
- It not good in error handling
- You can't cancel the request.
- XSRF , XSS, CORS issues.		


Axios
- It is a 3rd party library for React used to make Ajax calls.
- It is good in error handling.
- It uses async techniques.
- It handles issues like CORS, XSRF, XSS etc.
- It allows to cancel requests.
- It uses virtual DOM.
- It can handle multiple requests simultaneously at the same time.
- can transform data into native format.
- It can transform JSON.
- Explicit conversions not required.

www.npmjs.com
1. Install axios for your project
> npm install axios --save
2. Import axios into component
import axios from "axios";      // It is a default export
3. Configure axios request. It is promise based hence it uses
	a) then()
	b) catch()
	c) finally()

axlos.get()
axlos.post()
axlos.put()
axlos.patch()
axios.delete()
for fetching
for saving
for updating
for partial update
for removing etc.

Syntax:
.then(function(response){
// returns response object
.catch(function(){
// returns error object
})
.finally(function(){
	//executes always
})

- Axios response comprises of various details like
a) data
b) headers[Content Type]
c) statusCode
d) statusText
e) read State etc..

Binding Date Type
- JavaScript date is configured by using Data Constructor.
	var now = new Date(); 		// loads current date & time
	var mdf = new Date("yy-mm-dd hrs:min:sec.milliSec"); 

- React date is configure by using date constructor.
- If you want to initialize date then avoid "new" dynamic memory allocation.
Syntax:
const [today, setTQOay] = useState(Date());


Formatting Date & Time using Moment:
	1. Install moment for project
		> npm install moment --save
	2. Import moment into component
		- import moment from "moment";
	3. Apply format for date using moment method
		- moment(your_date).format('your_format')
		Your date format can have:
			- ddd     short weekday
			- dddd    long weekday
			- DD      date value
			- Do      date value with suffix
			- MM      month number
			- MMM     short month format
			- MMMM    long month format
			- YY      short year format
			- yyyy    full year format

*** Two Way Binding
	- React supports only one way binding implicitly.
	- Two way binding requires explicit techniques.
	- To manage two way binding element requires "onChange" event to configure.

*** Event Binding in React
1. What is Event?
- Event is a message sent by sender to its subscriber in order to notify change.
- Event uses a communication pattern called "Observer".	
- Event follows a delegate mechanism (function pointer).

2. What is Event handler?
	- A handler is used to configure event for any element statically.
	- It uses "on" as prefix to attach any event with element.
	Syntax:
		onclick="handIeClick()"    // handler name
		click                      // event name

3. What is Event Listener?
	- A listener is used to configure event for element dynamically.
	- JavaScript uses "addEventListener()" function for configuring events.
	Syntax:
		document.querySelector("button").addEventListener("event",function(){})
		event => click, blur, keyup, change etc.

4. What are Event Arguments?
- Event arguments carry payload.
- Payload is the data carried from one location to another.
- JavaScript can use default arguments and custom arguments.
- The default arguments are
a) this
b) event
- "this" sends information about current element, which includes
id, name, className, src, width, height, href..
- "event" sends information about current event, which includes
clientX, clientY,gtrlKey,altKey,shiftKe etc...
Syntax:
<button onclick="InsertClick(this, event)">
function InsertClick(obj,e){
obj.id, obj.value, obj.name..
e.clientX, e.ke Code, e.ctrlKe
}















































-----------------------------------------------------
State in React App
	- Web uses "HTTP" as protocol.
	- HTTP is a state less protocol.
	- It can't remember information between requests.

	[ GO - GET - FORGET ]
		GO      Establish connection with server
		GET     Get response from server
		FORGET  Clean up the response details from server

	- Web applications use various state management techniques to remembers and use information across requests.

	- State management allows to allocate memory which is accessible across requests.

	- State can be managed both
		a) Client Side
		b) Server Side
	- Client Side State Management allows to allocate memory and store data on client
device so that it can avoid round trips.
	- Server Side state management allocates memory on server so that data is loaded
always as a result of round trip.

	- React can manage server side rendering and state by using a full stack environment
designed using framework like Next JS.

	- React can manage state client side by using various techniques (hooks) like
		a) useState()
		b) useContext()
		c) useCallback()
		d) useMemo()
		e) useRef()
		f) useReducer() etc.

	- React can use a 3rd party state management library like "Redux" while handling large
scale applications.

 useState()
	- It is a react hook for handling local state for component.
	- Hook is technically a function.
	- It represents a service.
	- Service is a pre-defined business logic which you can inject, customize and implement
for your requirements.
	- useState() is a hook that returns memory object with getter & setter.
	- Getter can read and return state value.
	- Setter can assign and save value into state.
	- It requires a de-structuring declaration to access the getter and setter of state.	
	Syntax:
		const [getter, setter] = useState();


FAQ'S:
1. What is [getter, setter] referring to?
	A. It refers to de-structuring declaration.

2. Why you are using const for declaring state, can we use var or let?
A.
	- State must be initialized.
	- Var & Let allows to ignore initialization, hence they are not recommended.
	- State can't be assigned after initialization.
	- Var & Let allows assignment, hence they are not good.
	- State must be initialized first then you can use it.
	- Var allows hoisting, hence it is not good for state.
	- Yes we can use var & let to declare state but not recommended.

3. Why const for state?
A.
	- It allows only initialization.
	- It will not allow assignment
	- It will not allow shadowing and hoisting.

4. How you can configure a new value into state if it is declared with const?
A.
	- We will not assign value into const.
	- We re-initialize value into const.
	Syntax:
		const [uname, setUname] = useState("John");
		setUname = "David"; // invalid - assignment to const is not valid
		setUname("David"); // valid

Note: 
	- You can't set state while creating the component.
	- You can set value into state after component creation.
	- It can be at the mount phase or on any specific event.
	-Component mount [load] is defined using "useEffect()" hook.

useEffect()
	- It is used to define actions to perform at the time of mounting component.
	- It can also defined actions on unmount.
	- It uses a call back and dependencies.
	Syntax:
		useEffect(
			// actions on mount
			return()=>{
				// actions on unmount
			}
		},[dependencies])


Data Binding
- Databinding is a technique of accessing data from source and updating into UI.
It identifies the changes from UI and updates back to source.
- React supports "One Way Binding".
- JavaScript requires lot of DOM methods for data binding.
- React uses a binding expression "{ }" to bind dynamic values with Ul elements.

Syntax:
var uname = "John";
<p> Hello ! {uname } </p>
<input type="text" value= uname} />

*** Binding various type of Data
-----------------------------------
- JavaScript data types are categorized into 2 groups
	1. Primitive Types
	2. Non Primitive Types
- Primitive Types
	a) Number
	b) Boolean
	c) String
	d) Null
	e) Undefined
	f) Big Int
	g) Symbol

Number Type:
------------------
- Number can be any one of the following
	Signed Integer
	Unsigned Integer
	Float
	Double
	Decimal
	Exponent	
	Binary
	Hexadecimal
	Octa
	Big Int

- JavaScript number functions are required in React to verify and present number.
	a) toFixed()
	const [price] = useState(4500.40);
	<p>{ price.toFixed(2) }</p>

	b) toPrecision()
	const [price] = useState(3.414);
	<p>{ price.toPrecision(2) }</p>

3. Boolean Type
	- JavaScript Boolean type handles true or false.
	- React JSX element can't display Boolean value, it can just use the Boolean.
	- You have to use various operators and functions to customize the display.
	Syntax:
	const [stock] = useState(true);
	<p> stock : {(stock === true)?"true":"false"} </p>

4. NUll Type
	- It returns a keyword "null" when value is not defined dynamically into a reference.
	- You can verify by using null keyword.
	Syntax:
	a) Set a session in your browser console
		> sessionStora e.setltem("uname", "John");
	b) You can view and control the session storage in your browser debugging tools at application category.
	c) Verify the session and render conditionally. Session returns "null" if it is removed from browser storage.
	ex- 
		{(sessionStorage.getItem("uname") === null)?<button>signin</button>:<button>signout</button>}
			NOTE -null is a keyword not String

5. Undefined Type
	- React configures undefined as keyword when value is not defined into a reference.
	- It is verified using "undefined" keyword.			
	Syntax:
	const[price] = useState();
	<p> {(price === undefined)?"PRice is not define":price} //---> not good way
	<p> {(price)?"PRice is not define":price}

6. Big Int
	- Large integers are not safe to use in browser.
	- Big Int specifies that it is a safe large integer and can be safely used in browser.
	Syntax:
	const [price] = useState( 998283842n );
	<p>{ price }</p>

7. symbol
	- It is used to configure a hidden property for object.
	- Hidden properties are ignored over iterations but accessible individually.

	Syntax:
	const ld = Symbol();
	const [ product ] = useState( { [ld]: 1, Name: "TV", Price: 56000 }); //id --> id is hidden because it is used within in the []
		ex-
		<script>
let
let
let ld: symbol
Symbol();
ld =
product =
Name
Price:
for(var key
1,
in product){
document. write(key +
document . write Product • ld
</scripp

Non Primitive Type
-------------------
1. Array
- Configuring array is same as in JavaScript
a) [] meta character
b) Array() constructor
- Storing elements into array is same.
- Reading elements from array requires same JS functions
a) find()
b) filter()
c) map() // reading all the document in as
d) forEach()// reading all the document in as
e) toString()
f) join()
g) slice()

You can present array elements in Ul directly by configuring element token.
Syntax:
const [data ] = useState( [ "A", "B", "C" ] );


<ol>
{
	data.amp(function(item,index){
		return <li key={index}> { item } </li>
	})
}
</ol>
<select>
{
	data.map(function(item,index){
		return <option key={index}> {item} </option>
	})
}
</select>


*** React Ajax Techniques
===========================
	1. XMLHttpRequest object
		- It can handle AJAX request from browser.
		- It is JavaScript browser window object.

	Step-1: Configure XMLHttpRequest object
		let http = new XMLHttpRequest();

	Step-2: Configure the request method & URL
		httpopen("method", "url", "as nc:true/false")
		method : GET, POST, PUT, DELETE

	Step-3: Send the request
		httpsend();

	Step-4: Execute the request by using "onreadystatechange" event
		http.onreadystatechange = function(){

		}

	Setp-5: Verify the ready state
		1 Initial
		2 Success
		3 Complete
		4 Ready
		On ready you can get the response and implement in component
		if(http.readState === 4){

		}
	
	step—6: Access the response
		http.responseText
		http.responseHTML		
		http.responseXML		


Enable Bootstrap for your React project:
	1. Open terminal in your project workspace
	2. Install bootstrap & icons
		> npm install bootstrap bootstrap-icons
	3. Go to "main.•sx" and import CSS
		import '../node modules/bootstrap/dist/css/bootstrap.css';
		import '../node modules/bootstrap-icons/font/bootstrap-icons.css';


EX :-
1. Add a new file into public folder by name
	"product.json"
2. Go to "src/components"
	"ajax-demo.jsx"
3. Go to main.•sx and set <AjaxDemo> in startup

Issues with XMLHttpRequest:
	- It is not async by default.
	- You have to make it async explicitly.		
	- It returns response in XML or Text.
	- Hence explicit parsing techniques are required.
	- It is not good in error handling.
	- It is not good in security. [XSS, XSRF]
			xss - Cross Site Scripting Attack
			XSRF - Cross Site Request Forgers

Solution: JavaScript Fetch API			













----------------------------
Day-1 https://youtu.be/aWytG6aGG3s 
Day-2 https://youtu.be/87Asu_qwOGc 
Day-3 https://youtu.be/zxNhBLR-0-k 
Day-4 https://youtu.be/xbyPXRviLrM 
Day-5 https://youtu.be/puKoTcanrzM 
Day-6 https://youtu.be/zfdbuBiAHyM 
Day-7 https://youtu.be/YtDFA_5cfKY
Day-8 https://youtu.be/3zmK41JP5zU
Day-9 https://youtu.be/qlqASkO2tyI
Day-10 https://youtu.be/NQ1C2cNSWaI
-----------------------------



------------------------------------------------------------------------------------------------------
React Js @ 7:30 AM (IST) by Mr. Sudhakar Sharma_New_Link [30-04-2025]

Joining URL: https://us06web.zoom.us/j/89710056976?pwd=pVaWxn6PZ5wp4cJdz1jwx8ZooXPrIk.1

Meeting Link : https://zoom.us/j/89710056976
Password: 228247
Admin: Mr. Areef
From 12th May 2025 MONDAY ONWARDS
-------------------------------------------------------------------------------------------------------











